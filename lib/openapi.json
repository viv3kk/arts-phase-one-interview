{
  "openapi": "3.0.1",
  "info": {
    "title": "HTravels API Documentation",
    "description": "API documentation for HTravels application",
    "contact": { "name": "HTravels Team", "email": "support@htravels.com" },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local Development Server"
    }
  ],
  "tags": [
    {
      "name": "Public Vehicle",
      "description": "Public APIs for accessing vehicle information"
    },
    {
      "name": "Public Bouncie Integration",
      "description": "Public APIs for Bouncie OAuth callback"
    },
    {
      "name": "Renter Booking",
      "description": "APIs for managing renter bookings"
    },
    { "name": "Bookings", "description": "APIs for managing vehicle bookings" },
    {
      "name": "Business Profile",
      "description": "APIs for managing business profiles"
    },
    {
      "name": "Vehicle Blocked Dates",
      "description": "APIs for managing vehicle blocked dates"
    },
    {
      "name": "Maintenance",
      "description": "APIs for managing vehicle maintenance records"
    },
    {
      "name": "Host Login",
      "description": "APIs for host authentication and login"
    },
    {
      "name": "Public Business Vehicle",
      "description": "Public APIs for accessing business vehicle information"
    },
    {
      "name": "Checkout",
      "description": "APIs for managing checkout sessions and payments"
    },
    {
      "name": "Renter",
      "description": "APIs for managing renter profiles and identity verification"
    },
    {
      "name": "Business Vehicle",
      "description": "APIs for managing business vehicles"
    },
    {
      "name": "Bouncie Integration",
      "description": "APIs for Bouncie OAuth authorization"
    },
    {
      "name": "Vehicle Verification",
      "description": "APIs for managing vehicle verification process"
    },
    {
      "name": "Vehicle Onboarding",
      "description": "APIs for managing vehicle onboarding process"
    }
  ],
  "paths": {
    "/secure/vehicle/{vehicleId}/maintenance/{id}": {
      "get": {
        "tags": ["Maintenance"],
        "summary": "Get maintenance record by ID",
        "description": "Retrieves a specific maintenance record by its ID",
        "operationId": "getMaintenance",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the maintenance record to retrieve",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Maintenance record not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Maintenance record found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/MaintenanceDTO" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Maintenance"],
        "summary": "Update maintenance record",
        "description": "Updates an existing maintenance record",
        "operationId": "updateMaintenance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the maintenance record to update",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateMaintenanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Maintenance record not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Maintenance record updated successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/MaintenanceDTO" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Maintenance"],
        "summary": "Deactivate maintenance record",
        "description": "Marks a maintenance record as inactive",
        "operationId": "inactiveMaintenanceRecord",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the maintenance record",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Maintenance record deactivated successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/user/profile": {
      "get": {
        "tags": ["user-controller"],
        "operationId": "getUsers",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/UserProfileDTO" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["user-controller"],
        "operationId": "updateProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateProfileRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/UserProfileDTO" }
              }
            }
          }
        }
      }
    },
    "/secure/refresh-cache": {
      "put": {
        "tags": ["cache-controller"],
        "operationId": "refreshCache",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "type": "string" } }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/message-template/{templateId}": {
      "get": {
        "tags": ["message-template-controller"],
        "operationId": "getTemplate",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/MessageTemplateDTO" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["message-template-controller"],
        "operationId": "updateTemplate",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/MessageTemplateDTO" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["message-template-controller"],
        "operationId": "inactiveTemplate",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/maintenance/{maintenanceId}": {
      "get": {
        "tags": ["maintenance-controller-v-1"],
        "operationId": "getMaintenance_1",
        "parameters": [
          {
            "name": "maintenanceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceDetailDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["maintenance-controller-v-1"],
        "operationId": "updateMaintenance_1",
        "parameters": [
          {
            "name": "maintenanceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMaintenanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMaintenanceResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["maintenance-controller-v-1"],
        "operationId": "deleteMaintenance",
        "parameters": [
          {
            "name": "maintenanceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/specification": {
      "put": {
        "tags": ["Business Vehicle"],
        "summary": "Update vehicle specifications",
        "description": "Updates vehicle specifications including seats, doors, transmission, fuel type, drivetrain, towing capacity and boot space",
        "operationId": "updateVehicleSpecifications",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to update specifications for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleSpecificationUpdateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle specifications updated successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/registration-details": {
      "put": {
        "tags": ["Business Vehicle"],
        "summary": "Update vehicle registration details",
        "description": "Updates vehicle registration details including license plate number, state, and description",
        "operationId": "updateVehicleRegistrationDetails",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to update registration details for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRegistrationDetailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle registration details updated successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/pricing": {
      "put": {
        "tags": ["Business Vehicle"],
        "summary": "Update vehicle pricing",
        "description": "Updates vehicle pricing including daily prices, base price, and boost pricing percentage",
        "operationId": "updateVehiclePricing",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to update pricing for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdatePricingRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle pricing updated successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/onboarding-status": {
      "put": {
        "tags": ["Business Vehicle"],
        "summary": "Update vehicle onboarding status",
        "description": "Updates vehicle onboarding status",
        "operationId": "updateOnboardingStatus",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to update onboarding status for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVehicleOnboardingStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle onboarding status updated successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/locations": {
      "put": {
        "tags": ["Business Vehicle"],
        "summary": "Update vehicle locations",
        "description": "Updates vehicle locations",
        "operationId": "updateVehicleLocations",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to update locations for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVehicleLocationsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle locations updated successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/images": {
      "put": {
        "tags": ["Business Vehicle"],
        "summary": "Update vehicle images",
        "description": "Updates vehicle images",
        "operationId": "updateVehilceImages",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to update images for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVehicleImagesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle images updated successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/features": {
      "put": {
        "tags": ["Business Vehicle"],
        "summary": "Update vehicle features",
        "description": "Updates vehicle features including predefined and custom features",
        "operationId": "updateVehicleFeatures",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to update features for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateFeatureRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle features updated successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/faqs/{questionId}": {
      "put": {
        "tags": ["Business Vehicle"],
        "operationId": "updateFAQsForVehicle",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuestionAnswer" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionAnswerResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Business Vehicle"],
        "operationId": "deleteFAQs",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": { "*/*": { "schema": { "type": "boolean" } } }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/discount": {
      "put": {
        "tags": ["Business Vehicle"],
        "summary": "Update vehicle discount",
        "description": "Updates vehicle discount configuration",
        "operationId": "updateDiscount",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to update discount for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDiscountConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle discount updated successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/description": {
      "put": {
        "tags": ["Business Vehicle"],
        "summary": "Update vehicle description and guide lines",
        "description": "Updates vehicle description and guide lines",
        "operationId": "updateDescriptionAndGuideLines",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to update description and guide lines for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDescriptionAndGuideLinesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle description and guide lines updated successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/add-on": {
      "get": {
        "tags": ["Business Vehicle"],
        "summary": "Get vehicle extras configuration",
        "description": "Retrieves the extras configuration for a vehicle",
        "operationId": "getVehicleAddOns",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "Vehicle ID",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "requestParams",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Extras configuration retrieved successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/VehicleAddOn" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Business Vehicle"],
        "summary": "Delete vehicle extra item",
        "description": "Soft delete an add-on or penalty",
        "operationId": "activeInactiveAddOns",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "Vehicle ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ActiveInactiveRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Extra item deleted successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/VehicleAddOnListDTO" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Business Vehicle"],
        "summary": "Add vehicle extra item",
        "description": "Add a new add-on or penalty to the vehicle. Type is determined automatically based on request parameters.",
        "operationId": "addAddOn",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "Vehicle ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VehicleAddOnRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "201": {
            "description": "Extra item added successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleAddOnDetailDTO"
                }
              }
            }
          }
        }
      }
    },
    "/secure/admin/user-role": {
      "get": {
        "tags": ["user-role-mapping-controller"],
        "operationId": "getViewUserRolesMapping",
        "parameters": [
          {
            "name": "requestParams",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Pageable" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageUserRoleMappingListDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["user-role-mapping-controller"],
        "operationId": "saveOrUpdateRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleMappingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      },
      "post": {
        "tags": ["user-role-mapping-controller"],
        "operationId": "saveUserRoleMapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserRoleMappingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/webhooks/stripe": {
      "post": {
        "tags": ["stripe-webhook-controller"],
        "operationId": "handleStripeEvent",
        "parameters": [
          {
            "name": "Stripe-Signature",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "string" } } },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/webhooks/bouncie/events": {
      "post": {
        "tags": ["bouncie-webhook-controller"],
        "operationId": "handleWebhookEvent",
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "string" } } },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/vehicles/{vehicleId}/blocked-dates": {
      "post": {
        "tags": ["Vehicle Blocked Dates"],
        "summary": "Block vehicle dates",
        "description": "Blocks specific dates for a vehicle with a given reason",
        "operationId": "blockVehicleDates",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockVehicleDatesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Dates blocked successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleBlockedDateDTO"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/vehicle/{vehicleId}/maintenance": {
      "get": {
        "tags": ["Maintenance"],
        "summary": "Get maintenance records for a vehicle",
        "description": "Retrieves all maintenance records for a specific vehicle, sorted by status (overdue, due soon, scheduled)",
        "operationId": "getMaintenanceByVehicle",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to get maintenance records for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Maintenance records found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/MaintenanceDTO" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Maintenance"],
        "summary": "Create a new maintenance record",
        "description": "Creates a new maintenance record for a vehicle",
        "operationId": "createMaintenance",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateMaintenanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Maintenance record created successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/MaintenanceDTO" }
              }
            }
          }
        }
      }
    },
    "/secure/vehicle/{vehicleId}/maintenance-records": {
      "get": {
        "tags": ["Maintenance"],
        "operationId": "getMaintenanceRecordHistoryList",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MaintenanceRecordDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Maintenance"],
        "summary": "Mark maintenance record as completed",
        "description": "Marks a maintenance record as completed",
        "operationId": "markMaintenanceAsCompleted",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkMaintenanceAsCompletedRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Maintenance record not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Maintenance record marked as completed",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/user/identity-verification": {
      "post": {
        "tags": ["user-controller"],
        "operationId": "verifyIdentity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerifyIdentityRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HostVerifyIdentityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secure/renter/identity-verification": {
      "post": {
        "tags": ["Renter"],
        "summary": "Verify renter identity",
        "description": "Initiates the identity verification process for the renter",
        "operationId": "verifyIdentity_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerifyIdentityRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": { "description": "Access denied - requires ROLE_GUEST" },
          "200": {
            "description": "Identity verification initiated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RenterVerifyIdentityResponse"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/renter/bookings/{bookingId}/chat/message": {
      "post": {
        "tags": ["Renter Booking"],
        "summary": "Send message to a booking",
        "description": "Sends a message to a booking. This is typically used by hosts to send a message to a renter.",
        "operationId": "sendMessage",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SendMessageRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UnreadMessagesResponse"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/notification/generate": {
      "post": {
        "tags": ["notification-controller"],
        "operationId": "generateNotfication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Notification" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/message-template": {
      "get": {
        "tags": ["message-template-controller"],
        "operationId": "getTemplates",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageTemplateListDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["message-template-controller"],
        "operationId": "createTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/MessageTemplateDTO" }
              }
            }
          }
        }
      }
    },
    "/secure/maintenance": {
      "get": {
        "tags": ["maintenance-controller-v-1"],
        "operationId": "getAllMaintenance",
        "parameters": [
          {
            "name": "requestParams",
            "in": "query",
            "description": "Query parameters for filtering maintenance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "description": "Pagination and sorting parameters",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Pageable" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageMaintenanceListDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["maintenance-controller-v-1"],
        "operationId": "createMaintenanceForVehicle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMaintenanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMaintenanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secure/generic-file-upload": {
      "post": {
        "tags": ["file-upload-controller"],
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "fileType",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["file"],
                "type": "object",
                "properties": {
                  "file": { "type": "string", "format": "binary" }
                }
              }
            }
          }
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/FileUploadDTO" }
              }
            }
          }
        }
      }
    },
    "/secure/checkout": {
      "post": {
        "tags": ["Checkout"],
        "operationId": "createCheckout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateCheckoutRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/CheckoutDTO" }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/business/vehicles/{vehicleId}/faqs": {
      "get": {
        "tags": ["Business Vehicle"],
        "operationId": "getVehicleFAQs",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/FAQsListResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Business Vehicle"],
        "operationId": "createFAQ",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FAQsRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/FAQsListResponse" }
              }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/vin": {
      "post": {
        "tags": ["Business Vehicle"],
        "summary": "Create vehicle",
        "description": "Creates a new vehicle",
        "operationId": "craeteVehicle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVehicleRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle created successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/migrate": {
      "post": {
        "tags": ["Business Vehicle"],
        "summary": "Migrate vehicles",
        "description": "Performs vehicle data migration",
        "operationId": "migrate",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Migration completed successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/locations": {
      "get": {
        "tags": ["Business Profile"],
        "operationId": "getSuggestedLocations",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LocationDTO" }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Business Profile"],
        "operationId": "createLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LocationRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/Location" } }
            }
          }
        }
      }
    },
    "/secure/business/onboarding": {
      "post": {
        "tags": ["Business Profile"],
        "summary": "Onboard a new business",
        "description": "Creates a new business profile and returns the onboarding URL",
        "operationId": "onboardBusiness",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Business onboarding URL generated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secure/bouncie/webhook": {
      "post": {
        "tags": ["Bouncie Integration"],
        "operationId": "createWebhook",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BouncieWebhookResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secure/bookings/{bookingId}/chat/message": {
      "post": {
        "tags": ["Bookings"],
        "summary": "Send message to a booking",
        "description": "Sends a message to a booking. This is typically used by hosts to send a message to a renter.",
        "operationId": "sendMessage_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" },
            "example": "book_123456"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SendMessageRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal server error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden - User not authorized to send message",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UnreadMessagesResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successfully sent message",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/rate-highway/process-csv": {
      "post": {
        "tags": ["rate-highway-controller"],
        "operationId": "processCsv",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AccessFileRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/public/vehicles/migrate": {
      "post": {
        "tags": ["Public Vehicle"],
        "summary": "Migrate pickup locations",
        "description": "Converts pickup locations to geo points (Internal use only)",
        "operationId": "migratePickupLocationToGeoPoint",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": { "description": "Migration completed successfully" }
        }
      }
    },
    "/public/business/vehicles/{vehicleId}/start-chat": {
      "post": {
        "tags": ["Public Business Vehicle"],
        "operationId": "startChat",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/generate-token": {
      "post": {
        "tags": ["generate-token-controller"],
        "operationId": "generateJwtToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GenerateTokenRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/renter/login/mobile/otp/verify": {
      "post": {
        "tags": ["renter-login-controller"],
        "operationId": "verifyOTP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenterMobileNumberLoginVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OTPVerifyResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/auth/renter/login/mobile/otp/send": {
      "post": {
        "tags": ["renter-login-controller"],
        "operationId": "sendOTP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenterMobileNumberLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/OTPSentResponseDTO" }
              }
            }
          }
        }
      }
    },
    "/auth/login/mobile/otp/verify": {
      "post": {
        "tags": ["Host Login"],
        "summary": "Verify mobile OTP",
        "description": "Verifies the OTP sent to mobile number and returns authentication token",
        "operationId": "verifyOTP_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMobileNumberLoginVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OTP verified successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OTPVerifyResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login/mobile/otp/send": {
      "post": {
        "tags": ["Host Login"],
        "summary": "Send OTP to mobile number",
        "description": "Sends a one-time password to the provided mobile number for host login",
        "operationId": "sendOTP_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMobileNumberLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/OTPSentResponseDTO" }
              }
            }
          }
        }
      }
    },
    "/auth/login/email/otp/verify": {
      "post": {
        "tags": ["Host Login"],
        "summary": "Verify email OTP",
        "description": "Verifies the OTP sent to email address and returns authentication token",
        "operationId": "verifyOTP_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEmailLoginVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OTP verified successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OTPVerifyResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login/email/otp/send": {
      "post": {
        "tags": ["Host Login"],
        "summary": "Send OTP to email",
        "description": "Sends a one-time password to the provided email address for host login",
        "operationId": "sendOTP_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserEmailLoginRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/OTPSentResponseDTO" }
              }
            }
          }
        }
      }
    },
    "/secure/vehicle/onboarding": {
      "patch": {
        "tags": ["Vehicle Onboarding"],
        "summary": "Update or create onboarding",
        "description": "Updates an existing onboarding process or creates a new one",
        "operationId": "updateOnboarding",
        "parameters": [
          {
            "name": "onboardingId",
            "in": "query",
            "description": "ID of existing onboarding (optional)",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Step data for the onboarding process",
                "oneOf": [
                  { "$ref": "#/components/schemas/FeaturesStepData" },
                  { "$ref": "#/components/schemas/LicensePlateStepData" },
                  { "$ref": "#/components/schemas/LocationStepData" },
                  { "$ref": "#/components/schemas/SpecificationsStepData" },
                  { "$ref": "#/components/schemas/VehicleImageStepData" },
                  { "$ref": "#/components/schemas/VinStepData" }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Onboarding updated/created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingDetailsDTO"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/schedule/message/{messageId}": {
      "get": {
        "tags": ["schedule-message-controller"],
        "operationId": "getScheduleMessage_1",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ScheduleMessageDTO" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["schedule-message-controller"],
        "operationId": "performAction",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MessageActionRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/renter": {
      "get": {
        "tags": ["Renter"],
        "summary": "Get renter profile",
        "description": "Retrieves the complete profile of the logged-in renter",
        "operationId": "getRenterProfile",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": { "description": "Access denied - requires ROLE_GUEST" },
          "200": {
            "description": "Renter profile retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RenterProfileResponse"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      },
      "patch": {
        "tags": ["Renter"],
        "summary": "Update renter details",
        "description": "Updates profile information for the logged-in renter",
        "operationId": "updateRenterDetails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenterDetailsRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": { "description": "Access denied - requires ROLE_GUEST" },
          "200": {
            "description": "Renter details updated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RenterDetailsResponse"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/renter/bookings/{bookingId}/document": {
      "patch": {
        "tags": ["Renter Booking"],
        "summary": "Update booking document",
        "description": "Updates or creates booking document for a booking",
        "operationId": "updateBookingDocument",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateDocumentRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": { "description": "Access denied - requires ROLE_GUEST" },
          "200": {
            "description": "Booking document updated successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BookingDocumentDTO" }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/renter/bookings/{bookingId}/check-in-out-detail": {
      "patch": {
        "tags": ["Renter Booking"],
        "summary": "Update check-in document",
        "description": "Updates or creates check-in document for a booking",
        "operationId": "updateCheckInOutDetail",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCheckInOutDetailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": { "description": "Access denied - requires ROLE_GUEST" },
          "200": {
            "description": "Check-in document updated successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/CheckInOutDetailDTO" }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/renter/bookings/{bookingId}/chat/message/read": {
      "patch": {
        "tags": ["Renter Booking"],
        "summary": "Mark message as read",
        "description": "Marks a message as read",
        "operationId": "markMessageAsRead",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/renter/bookings/{bookingId}/chat/message/react": {
      "patch": {
        "tags": ["Renter Booking"],
        "summary": "React to a message",
        "description": "Reacts to a message in a chat",
        "operationId": "reactToMessage",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" },
            "example": "book_123456"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReactionRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/notification/mark-read/{notificationId}": {
      "patch": {
        "tags": ["notification-controller"],
        "operationId": "markAsRead",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/notification/mark-all-read": {
      "patch": {
        "tags": ["notification-controller"],
        "operationId": "markAllAsRead",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/checkout/{checkoutId}": {
      "get": {
        "tags": ["Checkout"],
        "summary": "Get checkout details",
        "description": "Retrieves details of a specific checkout session",
        "operationId": "getCheckoutDetails",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout session to retrieve",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": { "description": "Access denied - requires ROLE_GUEST" },
          "200": {
            "description": "Checkout details retrieved successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/CheckoutDTO" }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      },
      "patch": {
        "tags": ["Checkout"],
        "operationId": "addItemInCheckout",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout session to update",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddItemRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/CheckoutDTO" }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/business/vehicles/{vehicleId}": {
      "get": {
        "tags": ["Business Vehicle"],
        "summary": "Get vehicle by ID",
        "description": "Retrieves detailed information about a specific vehicle",
        "operationId": "getVehicleById",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to retrieve",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle details retrieved successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      },
      "patch": {
        "tags": ["Business Vehicle"],
        "summary": "Update vehicle details",
        "description": "Updates specific fields of a vehicle",
        "operationId": "updateVehicle",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to update",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVehicleRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle updated successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/VehicleDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/add-on/{addOnId}": {
      "patch": {
        "tags": ["Business Vehicle"],
        "summary": "Update vehicle extra item",
        "description": "Update an add-on or penalty",
        "operationId": "updateAddOn",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "Vehicle ID",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "addOnId",
            "in": "path",
            "description": "Add-on ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VehicleAddOnRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Extra item updated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleAddOnDetailDTO"
                }
              }
            }
          }
        }
      }
    },
    "/secure/bookings/{bookingId}": {
      "get": {
        "tags": ["Bookings"],
        "summary": "Get booking details",
        "description": "Retrieves detailed information about a specific booking including renter details and insurance information",
        "operationId": "getBooking",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking to retrieve",
            "required": true,
            "schema": { "type": "string" },
            "example": "book_123456"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal server error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden - User not authorized to access this booking",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Successfully retrieved booking details",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BookingDetailResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BookingDetailResponse"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      },
      "patch": {
        "tags": ["Bookings"],
        "summary": "Update booking",
        "description": "Updates a booking like adding notes, updating status, etc.",
        "operationId": "updateBooking",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" },
            "example": "book_123456"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateBookingRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal server error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden - User not authorized to add notes",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          },
          "200": {
            "description": "Successfully updated booking",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/bookings/{bookingId}/documents": {
      "patch": {
        "tags": ["Bookings"],
        "summary": "Verify insurance",
        "description": "Verifies or rejects the insurance documentation for a booking. If rejected, the booking will be cancelled.",
        "operationId": "verifyDocuments",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" },
            "example": "book_123456"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyDocumentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal server error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Invalid request - Booking cannot be verified in current status",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden - User not authorized to verify insurance",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          },
          "200": {
            "description": "Successfully verified insurance",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BookingDetailResponse"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/bookings/{bookingId}/check-in-out-detail": {
      "patch": {
        "tags": ["Bookings"],
        "summary": "Update check-in document",
        "description": "Updates or creates a check-in document for a booking. This is typically used by hosts to document vehicle condition at check-in.",
        "operationId": "updateCheckInDocument",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" },
            "example": "book_123456"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCheckInOutDetailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Successfully updated check-in document",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/CheckInOutDetailDTO" }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/bookings/{bookingId}/chat/message/read": {
      "patch": {
        "tags": ["Bookings"],
        "summary": "Mark message as read",
        "description": "Marks a message as read",
        "operationId": "markMessageAsRead_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the chat",
            "required": true,
            "schema": { "type": "string" },
            "example": "chat_123456"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal server error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden - User not authorized to mark message as read",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Successfully marked message as read",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/bookings/{bookingId}/chat/message/react": {
      "patch": {
        "tags": ["Bookings"],
        "summary": "React to a message",
        "description": "Reacts to a message in a chat",
        "operationId": "reactToMessage_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" },
            "example": "book_123456"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReactionRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal server error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden - User not authorized to react to message",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          },
          "200": {
            "description": "Successfully reacted to message",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/bookings/migrate": {
      "patch": {
        "tags": ["Bookings"],
        "operationId": "migrateBookings",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/vehicle/{vehicleId}/maintenance/stats": {
      "get": {
        "tags": ["Maintenance"],
        "summary": "Get maintenance statistics",
        "description": "Retrieves comprehensive maintenance statistics for a vehicle",
        "operationId": "getMaintenanceStats",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Maintenance statistics retrieved successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/MaintenanceStatsDTO" }
              }
            }
          }
        }
      }
    },
    "/secure/vehicle/{vehicleId}/maintenance-records/{id}": {
      "get": {
        "tags": ["Maintenance"],
        "operationId": "getMaintenanceRecordHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the maintenance record history",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceRecordDTO"
                }
              }
            }
          }
        }
      }
    },
    "/secure/vehicle/verify": {
      "get": {
        "tags": ["Vehicle Verification"],
        "summary": "Get vehicle verification details",
        "description": "Retrieves verification details for a specific vehicle",
        "operationId": "verifyVehicle",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the vehicle",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of verification",
            "required": true,
            "schema": { "type": "string", "enum": ["VIN"] }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle verification details retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleVerifyResponse"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/vehicle/onboarding/{onboardingId}": {
      "get": {
        "tags": ["Vehicle Onboarding"],
        "summary": "Get active onboarding details",
        "description": "Retrieves details of an active vehicle onboarding process",
        "operationId": "getActiveOnboardingDetails",
        "parameters": [
          {
            "name": "onboardingId",
            "in": "path",
            "description": "ID of the onboarding process",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Onboarding details retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingDetailsDTO"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/telematics": {
      "get": {
        "tags": ["telematics-data-controller"],
        "operationId": "getVehicleOverviewTelematicsDataList",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleOverviewTelematicsDataListDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secure/telematics/{vehicleId}/overview": {
      "get": {
        "tags": ["telematics-data-controller"],
        "operationId": "getVehicleOverviewTelematicsData",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleOverviewTelematicsData"
                }
              }
            }
          }
        }
      }
    },
    "/secure/schedule/message": {
      "get": {
        "tags": ["schedule-message-controller"],
        "operationId": "getScheduleMessage",
        "parameters": [
          {
            "name": "requestParams",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Pageable" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageScheduleMessageListDTO"
                }
              }
            }
          }
        }
      }
    },
    "/secure/schedule/message/stats": {
      "get": {
        "tags": ["schedule-message-controller"],
        "operationId": "getScheduleMessageStats",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleMessageStats"
                }
              }
            }
          }
        }
      }
    },
    "/secure/renter/bookings": {
      "get": {
        "tags": ["Renter Booking"],
        "summary": "Get renter bookings",
        "description": "Retrieves a list of all bookings for the logged-in renter",
        "operationId": "getRenterBookings",
        "parameters": [
          {
            "name": "requestParams",
            "in": "query",
            "description": "Query parameters for filtering bookings",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Pageable" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": { "description": "Access denied - requires ROLE_GUEST" },
          "200": {
            "description": "List of bookings retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RenterBookingListDTO"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/renter/bookings/{bookingId}": {
      "get": {
        "tags": ["Renter Booking"],
        "summary": "Get booking details",
        "description": "Retrieves detailed information about a specific booking",
        "operationId": "getRenterBookingDetail",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking to retrieve",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": { "description": "Access denied - requires ROLE_GUEST" },
          "200": {
            "description": "Booking details retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RenterBookingDetailDTO"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/renter/bookings/{bookingId}/chat": {
      "get": {
        "tags": ["Renter Booking"],
        "summary": "Get chat for a booking",
        "description": "Retrieves the chat for a specific booking",
        "operationId": "getChat",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ChatDTO" } }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/renter/bookings/{bookingId}/chat/message/unread": {
      "get": {
        "tags": ["Renter Booking"],
        "summary": "Get unread messages for a chat",
        "description": "Retrieves the unread messages for a specific chat",
        "operationId": "getUnreadMessages",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UnreadMessagesResponse"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/refresh-cache/keys": {
      "get": {
        "tags": ["cache-controller"],
        "operationId": "refreshCacheKeys",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
          }
        }
      }
    },
    "/secure/notification": {
      "get": {
        "tags": ["notification-controller"],
        "operationId": "getNotificationsForUser",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Notification" }
                }
              }
            }
          }
        }
      }
    },
    "/secure/maintenance/{vehicleId}/prerequisites": {
      "get": {
        "tags": ["maintenance-controller-v-1"],
        "operationId": "getCreateMaintenancePrerequisites",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMaintenancePrerequisitesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secure/generic-file-upload/download": {
      "get": {
        "tags": ["file-upload-controller"],
        "operationId": "getFileViaByteArrayResource",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/secure/filter/{key}": {
      "get": {
        "tags": ["generic-filter-controller"],
        "operationId": "getFiltersViaConfigKey",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FilterDTOObject" }
                }
              }
            }
          }
        }
      }
    },
    "/secure/business/vehicles": {
      "get": {
        "tags": ["Business Vehicle"],
        "summary": "Get all vehicles for a business profile",
        "description": "Retrieves a list of vehicles associated with the business profile",
        "operationId": "getVehicles",
        "parameters": [
          {
            "name": "requestParams",
            "in": "query",
            "description": "Query parameters for filtering vehicles",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "List of vehicles retrieved successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/VehicleListDTO" }
              }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/calendar": {
      "get": {
        "tags": ["Business Vehicle"],
        "summary": "Get vehicles for calendar view",
        "description": "Retrieves vehicles with their calendar information",
        "operationId": "getVehiclesForCalendar",
        "parameters": [
          {
            "name": "requestParams",
            "in": "query",
            "description": "Query parameters for filtering calendar view",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Calendar view data retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VehilceCalendarViewDTO"
                }
              }
            }
          }
        }
      }
    },
    "/secure/bouncie/auth-url": {
      "get": {
        "tags": ["Bouncie Integration"],
        "summary": "Generate Bouncie authorization URL",
        "description": "Generates a Bouncie OAuth authorization URL for the authenticated user's business profile",
        "operationId": "generateAuthorizationUrl",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Business profile not found or invalid request"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Authorization URL generated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BouncieAuthUrlResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secure/bookings": {
      "get": {
        "tags": ["Bookings"],
        "summary": "List bookings",
        "description": "Retrieves a paginated list of bookings with optional filters. Results are sorted by creation date in descending order.",
        "operationId": "listBookings",
        "parameters": [
          {
            "name": "requestParams",
            "in": "query",
            "description": "Query parameters for filtering bookings",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "description": "Pagination and sorting parameters",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Pageable" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal server error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden - User not authorized to access bookings",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Successfully retrieved bookings",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BookingListingDTO" }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageBookingListingDTO"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/bookings/{bookingId}/chat": {
      "get": {
        "tags": ["Bookings"],
        "summary": "Get chat for a booking",
        "description": "Retrieves the chat for a specific booking",
        "operationId": "getChat_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ChatDTO" } }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/bookings/{bookingId}/chat/message/unread": {
      "get": {
        "tags": ["Bookings"],
        "summary": "Get unread messages for a booking",
        "description": "Retrieves the unread messages for a specific booking",
        "operationId": "getUnreadMessages_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of the booking",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UnreadMessagesResponse"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/bookings/chats": {
      "get": {
        "tags": ["Bookings"],
        "summary": "List chats with booking information",
        "description": "Retrieves a paginated list of chats with booking details including renter, vehicle, trip duration, status, last message, and unread count",
        "operationId": "listChats",
        "parameters": [
          {
            "name": "requestParams",
            "in": "query",
            "description": "Query parameters for filtering chats",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "description": "Pagination and sorting parameters",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Pageable" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal server error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden - User not authorized to access chats",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Successfully retrieved chats",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ChatListingDTO" }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/PageChatListingDTO" }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/admin/user-role/user/{userId}": {
      "get": {
        "tags": ["user-role-mapping-controller"],
        "operationId": "getUserRoles",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/RoleDTO" }
                }
              }
            }
          }
        }
      }
    },
    "/public/vehicles": {
      "get": {
        "tags": ["Public Vehicle"],
        "summary": "Get published vehicles",
        "description": "Retrieves a paginated list of published vehicles with optional filtering",
        "operationId": "getPublishedVehicles",
        "parameters": [
          {
            "name": "requestParams",
            "in": "query",
            "description": "Query parameters for filtering vehicles",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "List of vehicles retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PublicVehicleListDTO"
                }
              }
            }
          }
        }
      }
    },
    "/public/vehicles/{vehicleId}": {
      "get": {
        "tags": ["Public Vehicle"],
        "summary": "Get published vehicle details",
        "description": "Retrieves detailed information about a specific published vehicle",
        "operationId": "getPublishedVehicleById",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date for availability check",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for availability check",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to retrieve",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle details retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PublicVehicleDetailsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/public/filter/{key}": {
      "get": {
        "tags": ["generic-filter-controller"],
        "operationId": "getPublicFiltersViaConfigKey",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FilterDTOObject" }
                }
              }
            }
          }
        }
      }
    },
    "/public/business/vehicles": {
      "get": {
        "tags": ["Public Business Vehicle"],
        "summary": "Get vehicles by business profile",
        "description": "Retrieves a list of vehicles associated with a business profile",
        "operationId": "getPublicVechilesByBusinessProfileId",
        "parameters": [
          {
            "name": "requestParams",
            "in": "query",
            "description": "Query parameters for filtering vehicles",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "List of vehicles retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PublicVehicleListDTO"
                }
              }
            }
          }
        }
      }
    },
    "/public/business/vehicles/{vehicleId}": {
      "get": {
        "tags": ["Public Business Vehicle"],
        "summary": "Get vehicle details by business profile",
        "description": "Retrieves detailed information about a specific vehicle from a business profile",
        "operationId": "getPublicVehicleByBusinessProfileId",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date for availability check",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for availability check",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "pickupLocationId",
            "in": "query",
            "description": "Pickup location for availability check",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "dropoffLocationId",
            "in": "query",
            "description": "Dropoff location for availability check",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "vehicleId",
            "in": "path",
            "description": "ID of the vehicle to retrieve",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Vehicle details retrieved successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PublicVehicleDetailsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/public/business/vehicles/{vehicleId}/add-on": {
      "get": {
        "tags": ["Public Business Vehicle"],
        "summary": "Get vehicle addOns configuration",
        "description": "Retrieves the addOns configuration for a vehicle",
        "operationId": "getVehicleAddOns_1",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "Vehicle ID",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "requestParams",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "addOns configuration retrieved successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/VehicleAddOn" }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["health-check-controller"],
        "operationId": "healthCheck",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/bouncie/callback": {
      "get": {
        "tags": ["Public Bouncie Integration"],
        "summary": "Public Bouncie authorization callback",
        "description": "Public endpoint to process the OAuth callback from Bouncie. This endpoint is called by Bouncie's servers and does not require authentication.",
        "operationId": "processAuthorizationCallback",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Authorization code from Bouncie",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "state",
            "in": "query",
            "description": "State parameter for security validation",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Invalid authorization code or business profile not found"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": { "description": "Authorization processed successfully" }
        }
      }
    },
    "/secure/vehicles/{vehicleId}/blocked-dates/{id}": {
      "delete": {
        "tags": ["Vehicle Blocked Dates"],
        "summary": "Deactivate blocked dates",
        "description": "Marks a blocked date period as inactive",
        "operationId": "inactiveBlockedDates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the blocked date period",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Blocked dates deactivated successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleBlockedDateDTO"
                }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/vehicle/onboarding/{onboardingId}/reset": {
      "delete": {
        "tags": ["Vehicle Onboarding"],
        "summary": "Reset onboarding",
        "description": "Resets an onboarding process to its initial state",
        "operationId": "resetOnboarding",
        "parameters": [
          {
            "name": "onboardingId",
            "in": "path",
            "description": "ID of the onboarding to reset",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Onboarding reset successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/OnboardingResetDTO" }
              }
            }
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/secure/generic-file-upload/{id}": {
      "delete": {
        "tags": ["file-upload-controller"],
        "operationId": "uploadFile_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    },
    "/secure/business/vehicles/{vehicleId}/add-on/{itemId}": {
      "delete": {
        "tags": ["Business Vehicle"],
        "summary": "Delete vehicle extra item",
        "description": "Soft delete an add-on or penalty",
        "operationId": "deleteAddOn",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "description": "Vehicle ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/ErrorField" } }
            }
          },
          "200": {
            "description": "Extra item deleted successfully",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/SuccessDTO" } }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorField": {
        "type": "object",
        "properties": {
          "code": { "type": "string" },
          "message": { "type": "string" },
          "errorType": {
            "type": "string",
            "enum": [
              "VALIDATION_EXCEPTION",
              "APPLICATION_EXCEPTION",
              "AUTHENTICATION_EXCEPTION"
            ]
          }
        }
      },
      "CreateOrUpdateMaintenanceRequest": {
        "type": "object",
        "properties": {
          "taskType": {
            "type": "string",
            "enum": [
              "ESSENTIAL_TASK_OIL_CHANGE",
              "ESSENTIAL_TASK_TIRE_ROTATION",
              "ESSENTIAL_TASK_BRAKE_INSPECTION",
              "ESSENTIAL_TASK_BRAKE_PAD_REPLACEMENT",
              "ESSENTIAL_TASK_BATTERY_REPLACEMENT",
              "ESSENTIAL_TASK_AIR_FILTER_REPLACEMENT",
              "ESSENTIAL_TASK_CABIN_AIR_FILTER_REPLACEMENT",
              "ESSENTIAL_TASK_SPARK_PLUG_REPLACEMENT",
              "ESSENTIAL_TASK_COOLANT_FLUSH",
              "ESSENTIAL_TASK_TRANSMISSION_FLUID_CHANGE",
              "ESSENTIAL_TASK_POWER_STEERING_FLUID_CHANGE",
              "ESSENTIAL_TASK_BRAKE_FLUID_FLUSH",
              "TIRE_AND_SUSPENSION_TIRE_REPLACEMENT",
              "TIRE_AND_SUSPENSION_WHEEL_ALIGNMENT",
              "TIRE_AND_SUSPENSION_TIRE_BALANCING",
              "TIRE_AND_SUSPENSION_SUSPENSION_CHECK",
              "FLUID_AND_FILTERS_FUEL_FILTER_REPLACEMENT",
              "FLUID_AND_FILTERS_DIFFERENTIAL_FLUID_CHANGE",
              "FLUID_AND_FILTERS_WINDSHIELD_WASHER_FLUID_TOP_UP",
              "GENERAL_SERVICE_ANNUAL_INSPECTION",
              "GENERAL_SERVICE_MULTI_POINT_INSPECTION",
              "GENERAL_SERVICE_SCHEDULED_MAINTENANCE_30K_60K_90K",
              "OTHER_CHECK_ENGINE_LIGHT_DIAGNOSIS",
              "OTHER_VEHICLE_DETAIL_OR_CLEANING",
              "OTHER_SOFTWARE_OR_FIRMWARE_UPDATE"
            ]
          },
          "dueInMiles": { "type": "integer", "format": "int64" },
          "dueInDays": { "type": "integer", "format": "int32" },
          "lastCompletedAt": { "type": "string", "format": "date-time" },
          "isRecurring": { "type": "boolean" },
          "repeatEveryMiles": { "type": "integer", "format": "int64" },
          "repeatEveryDays": { "type": "integer", "format": "int64" },
          "lastOdometerReadingInMiles": {
            "type": "integer",
            "format": "int64"
          },
          "description": { "type": "string" },
          "notes": { "type": "string" }
        },
        "description": "Create maintenance request"
      },
      "MaintenanceDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "vehicleId": { "type": "string" },
          "taskType": {
            "type": "string",
            "enum": [
              "ESSENTIAL_TASK_OIL_CHANGE",
              "ESSENTIAL_TASK_TIRE_ROTATION",
              "ESSENTIAL_TASK_BRAKE_INSPECTION",
              "ESSENTIAL_TASK_BRAKE_PAD_REPLACEMENT",
              "ESSENTIAL_TASK_BATTERY_REPLACEMENT",
              "ESSENTIAL_TASK_AIR_FILTER_REPLACEMENT",
              "ESSENTIAL_TASK_CABIN_AIR_FILTER_REPLACEMENT",
              "ESSENTIAL_TASK_SPARK_PLUG_REPLACEMENT",
              "ESSENTIAL_TASK_COOLANT_FLUSH",
              "ESSENTIAL_TASK_TRANSMISSION_FLUID_CHANGE",
              "ESSENTIAL_TASK_POWER_STEERING_FLUID_CHANGE",
              "ESSENTIAL_TASK_BRAKE_FLUID_FLUSH",
              "TIRE_AND_SUSPENSION_TIRE_REPLACEMENT",
              "TIRE_AND_SUSPENSION_WHEEL_ALIGNMENT",
              "TIRE_AND_SUSPENSION_TIRE_BALANCING",
              "TIRE_AND_SUSPENSION_SUSPENSION_CHECK",
              "FLUID_AND_FILTERS_FUEL_FILTER_REPLACEMENT",
              "FLUID_AND_FILTERS_DIFFERENTIAL_FLUID_CHANGE",
              "FLUID_AND_FILTERS_WINDSHIELD_WASHER_FLUID_TOP_UP",
              "GENERAL_SERVICE_ANNUAL_INSPECTION",
              "GENERAL_SERVICE_MULTI_POINT_INSPECTION",
              "GENERAL_SERVICE_SCHEDULED_MAINTENANCE_30K_60K_90K",
              "OTHER_CHECK_ENGINE_LIGHT_DIAGNOSIS",
              "OTHER_VEHICLE_DETAIL_OR_CLEANING",
              "OTHER_SOFTWARE_OR_FIRMWARE_UPDATE"
            ]
          },
          "status": {
            "type": "string",
            "enum": ["OVERDUE", "DUE_SOON", "SCHEDULED", "COMPLETED"]
          },
          "dueInMiles": { "type": "integer", "format": "int64" },
          "dueInDays": { "type": "integer", "format": "int32" },
          "odometerAtServiceInMiles": { "type": "integer", "format": "int64" },
          "isRecurring": { "type": "boolean" },
          "repeatEveryMiles": { "type": "integer", "format": "int64" },
          "repeatEveryDays": { "type": "integer", "format": "int64" },
          "description": { "type": "string" },
          "notes": { "type": "string" },
          "createdBy": { "type": "string" },
          "updatedBy": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "UpdateProfileRequest": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string" }
        }
      },
      "RoleDTO": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "HOST",
              "CO_HOST",
              "INVESTOR",
              "PARTNER",
              "GUEST",
              "EXTERNAL_SERVICE"
            ]
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATE_VEHICLE",
                "EDIT_VEHICLE",
                "DELETE_VEHICLE",
                "VIEW_VEHICLE",
                "CREATE_TRIP",
                "EDIT_TRIP",
                "DELETE_TRIP",
                "GUEST",
                "STRIPE_WEBHOOK",
                "HOST",
                "INVESTOR",
                "PARTNER"
              ]
            }
          }
        }
      },
      "UserProfileDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "mobileNumber": { "type": "string" },
          "email": { "type": "string" },
          "name": { "type": "string" },
          "onboardingId": { "type": "string" },
          "roles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/RoleDTO" }
          },
          "businessProfileId": { "type": "string" },
          "isStripeConnected": { "type": "boolean" },
          "isTelematicsEnabled": { "type": "boolean" },
          "identityVerificationStatus": {
            "type": "string",
            "enum": ["NOT_STARTED", "IN_PROGRESS", "VERIFIED", "FAILED"]
          },
          "identityVerificationFailedReason": { "type": "string" },
          "identityVerifiedAt": { "type": "string", "format": "date-time" }
        }
      },
      "SuccessDTO": {
        "type": "object",
        "properties": { "message": { "type": "string" } }
      },
      "CreateMessageTemplateRequest": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "category": {
            "type": "string",
            "enum": [
              "CUSTOM",
              "TRIP_START",
              "TRIP_END",
              "CHECK_IN",
              "CHECK_OUT",
              "REMINDER",
              "INVOICE"
            ]
          },
          "useCase": {
            "type": "string",
            "enum": [
              "STANDARD",
              "TRIP_REMOE_UNLOCK",
              "AIRTPORT_DELIVERY",
              "CUSTOM_DELIVERY",
              "KEY_HANDOFF_INSTRUCTIONS",
              "EARLY_RETURN",
              "TRIP_END",
              "OTHER"
            ]
          },
          "vehicleIds": { "type": "array", "items": { "type": "string" } },
          "timingConfig": {
            "$ref": "#/components/schemas/MessageTimingConfig"
          },
          "messageVariables": {
            "type": "array",
            "items": { "type": "string" }
          },
          "messageBody": { "type": "string" },
          "attachments": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/File" }
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "relativePath": { "type": "string" }
        },
        "description": "Vehicle images"
      },
      "MessageTimingConfig": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "enum": [
              "BEFORE_TRIP_START",
              "BEFORE_TRIP_END",
              "AFTER_TRIP_START",
              "AFTER_TRIP_END"
            ]
          },
          "timeOffSet": { "type": "integer", "format": "int32" },
          "unit": { "type": "string", "enum": ["HOURS", "MINUTES", "DAYS"] }
        }
      },
      "MessageTemplateDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "businessProfileId": { "type": "string" },
          "category": {
            "type": "string",
            "enum": [
              "CUSTOM",
              "TRIP_START",
              "TRIP_END",
              "CHECK_IN",
              "CHECK_OUT",
              "REMINDER",
              "INVOICE"
            ]
          },
          "useCase": {
            "type": "string",
            "enum": [
              "STANDARD",
              "TRIP_REMOE_UNLOCK",
              "AIRTPORT_DELIVERY",
              "CUSTOM_DELIVERY",
              "KEY_HANDOFF_INSTRUCTIONS",
              "EARLY_RETURN",
              "TRIP_END",
              "OTHER"
            ]
          },
          "isActive": { "type": "boolean" },
          "vehicles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/VehicleDetails" }
          },
          "timingConfig": {
            "$ref": "#/components/schemas/MessageTimingConfig"
          },
          "messageVariables": {
            "type": "array",
            "items": { "type": "string" }
          },
          "messageBody": { "type": "string" },
          "attachments": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/File" }
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "createdBy": { "type": "string" },
          "updatedBy": { "type": "string" }
        }
      },
      "VehicleDetails": {
        "type": "object",
        "properties": {
          "vehicleId": { "type": "string" },
          "vehicleName": { "type": "string" },
          "make": { "type": "string" },
          "model": { "type": "string" },
          "modelYear": { "type": "integer", "format": "int32" }
        },
        "description": "Vehicle details"
      },
      "UpdateMaintenanceRequest": {
        "type": "object",
        "properties": {
          "maintenanceType": {
            "type": "string",
            "enum": [
              "GENERAL_MAINTENANCE_EVERY_5000",
              "GENERAL_MAINTENANCE_EVERY_7_RENTAL_DAYS",
              "GENERAL_MAINTENANCE_EVERY_MONTH",
              "ADHOC_MAINTENANCE"
            ]
          },
          "dateOfMaintenance": { "type": "string", "format": "date-time" },
          "odometerAtMaintenance": { "type": "integer", "format": "int64" },
          "rentedDaysSinceMaintenance": {
            "type": "integer",
            "format": "int32"
          },
          "totalMaintenances": { "type": "integer", "format": "int32" },
          "status": {
            "type": "string",
            "enum": ["PENDING", "IN_PROGRESS", "COMPLETED", "CANCELLED"]
          },
          "repairRecord": {
            "$ref": "#/components/schemas/UpdateRepairRecordRequest"
          }
        }
      },
      "UpdateRepairRecordRequest": {
        "type": "object",
        "properties": {
          "totalPartsPaymentInCents": { "type": "integer", "format": "int64" },
          "totalLaborPaymentInCents": { "type": "integer", "format": "int64" },
          "images": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/File" }
          },
          "notes": { "type": "string" },
          "vehicleOutInformation": {
            "$ref": "#/components/schemas/VehicleOutInformation"
          },
          "repairTasks": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ESSENTIAL_TASK_OIL_CHANGE",
                "ESSENTIAL_TASK_TIRE_ROTATION",
                "ESSENTIAL_TASK_BRAKE_INSPECTION",
                "ESSENTIAL_TASK_BRAKE_PAD_REPLACEMENT",
                "ESSENTIAL_TASK_BATTERY_REPLACEMENT",
                "ESSENTIAL_TASK_AIR_FILTER_REPLACEMENT",
                "ESSENTIAL_TASK_CABIN_AIR_FILTER_REPLACEMENT",
                "ESSENTIAL_TASK_SPARK_PLUG_REPLACEMENT",
                "ESSENTIAL_TASK_COOLANT_FLUSH",
                "ESSENTIAL_TASK_TRANSMISSION_FLUID_CHANGE",
                "ESSENTIAL_TASK_POWER_STEERING_FLUID_CHANGE",
                "ESSENTIAL_TASK_BRAKE_FLUID_FLUSH",
                "TIRE_AND_SUSPENSION_TIRE_REPLACEMENT",
                "TIRE_AND_SUSPENSION_WHEEL_ALIGNMENT",
                "TIRE_AND_SUSPENSION_TIRE_BALANCING",
                "TIRE_AND_SUSPENSION_SUSPENSION_CHECK",
                "FLUID_AND_FILTERS_FUEL_FILTER_REPLACEMENT",
                "FLUID_AND_FILTERS_DIFFERENTIAL_FLUID_CHANGE",
                "FLUID_AND_FILTERS_WINDSHIELD_WASHER_FLUID_TOP_UP",
                "GENERAL_SERVICE_ANNUAL_INSPECTION",
                "GENERAL_SERVICE_MULTI_POINT_INSPECTION",
                "GENERAL_SERVICE_SCHEDULED_MAINTENANCE_30K_60K_90K",
                "OTHER_CHECK_ENGINE_LIGHT_DIAGNOSIS",
                "OTHER_VEHICLE_DETAIL_OR_CLEANING",
                "OTHER_SOFTWARE_OR_FIRMWARE_UPDATE"
              ]
            }
          },
          "customRepairTasks": {
            "type": "array",
            "items": { "type": "string" }
          },
          "workshopDetails": { "$ref": "#/components/schemas/WorkshopDetails" }
        }
      },
      "VehicleOutInformation": {
        "type": "object",
        "properties": {
          "dateTimeOut": { "type": "string", "format": "date-time" },
          "dateTimeDue": { "type": "string", "format": "date-time" }
        }
      },
      "WorkshopDetails": {
        "type": "object",
        "properties": {
          "workshopName": { "type": "string" },
          "address": { "type": "string" }
        }
      },
      "UpdateMaintenanceResponse": {
        "type": "object",
        "properties": {
          "vehicleId": { "type": "string" },
          "vehicleName": { "type": "string" },
          "maintenanceId": { "type": "string" },
          "maintenanceType": {
            "type": "string",
            "enum": [
              "GENERAL_MAINTENANCE_EVERY_5000",
              "GENERAL_MAINTENANCE_EVERY_7_RENTAL_DAYS",
              "GENERAL_MAINTENANCE_EVERY_MONTH",
              "ADHOC_MAINTENANCE"
            ]
          },
          "totalPartsPaymentInCents": { "type": "integer", "format": "int64" },
          "totalLaborPaymentInCents": { "type": "integer", "format": "int64" },
          "images": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/File" }
          },
          "status": {
            "type": "string",
            "enum": ["PENDING", "IN_PROGRESS", "COMPLETED", "CANCELLED"]
          },
          "notes": { "type": "string" },
          "vehicleOutInformation": {
            "$ref": "#/components/schemas/VehicleOutInformation"
          },
          "repairTasks": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ESSENTIAL_TASK_OIL_CHANGE",
                "ESSENTIAL_TASK_TIRE_ROTATION",
                "ESSENTIAL_TASK_BRAKE_INSPECTION",
                "ESSENTIAL_TASK_BRAKE_PAD_REPLACEMENT",
                "ESSENTIAL_TASK_BATTERY_REPLACEMENT",
                "ESSENTIAL_TASK_AIR_FILTER_REPLACEMENT",
                "ESSENTIAL_TASK_CABIN_AIR_FILTER_REPLACEMENT",
                "ESSENTIAL_TASK_SPARK_PLUG_REPLACEMENT",
                "ESSENTIAL_TASK_COOLANT_FLUSH",
                "ESSENTIAL_TASK_TRANSMISSION_FLUID_CHANGE",
                "ESSENTIAL_TASK_POWER_STEERING_FLUID_CHANGE",
                "ESSENTIAL_TASK_BRAKE_FLUID_FLUSH",
                "TIRE_AND_SUSPENSION_TIRE_REPLACEMENT",
                "TIRE_AND_SUSPENSION_WHEEL_ALIGNMENT",
                "TIRE_AND_SUSPENSION_TIRE_BALANCING",
                "TIRE_AND_SUSPENSION_SUSPENSION_CHECK",
                "FLUID_AND_FILTERS_FUEL_FILTER_REPLACEMENT",
                "FLUID_AND_FILTERS_DIFFERENTIAL_FLUID_CHANGE",
                "FLUID_AND_FILTERS_WINDSHIELD_WASHER_FLUID_TOP_UP",
                "GENERAL_SERVICE_ANNUAL_INSPECTION",
                "GENERAL_SERVICE_MULTI_POINT_INSPECTION",
                "GENERAL_SERVICE_SCHEDULED_MAINTENANCE_30K_60K_90K",
                "OTHER_CHECK_ENGINE_LIGHT_DIAGNOSIS",
                "OTHER_VEHICLE_DETAIL_OR_CLEANING",
                "OTHER_SOFTWARE_OR_FIRMWARE_UPDATE"
              ]
            }
          },
          "customRepairTasks": {
            "type": "array",
            "items": { "type": "string" }
          },
          "workshopDetails": { "$ref": "#/components/schemas/WorkshopDetails" }
        }
      },
      "AddressDTO": {
        "type": "object",
        "properties": {
          "address": { "type": "string" },
          "coordinates": { "$ref": "#/components/schemas/GeoCoordinatesDTO" },
          "zip": { "type": "string" },
          "country": { "type": "string" },
          "city": { "type": "string" },
          "state": { "type": "string" },
          "street": { "type": "string" }
        }
      },
      "AuditTimeDTO": {
        "type": "object",
        "properties": {
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "BlockReasonDTO": {
        "type": "object",
        "description": "Additional data specific to the block reason"
      },
      "ComparatorVehicle": {
        "type": "object",
        "properties": {
          "title": { "type": "string" },
          "price": { "type": "integer", "format": "int32" },
          "maxPriceInCents": { "type": "integer", "format": "int32" },
          "minPriceInCents": { "type": "integer", "format": "int32" }
        }
      },
      "DiscountConfiguration": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "businessProfileId": { "type": "string" },
          "vehicleId": { "type": "string" },
          "threeDaysDiscount": { "type": "integer", "format": "int32" },
          "oneWeekDiscount": { "type": "integer", "format": "int32" },
          "twoWeekDiscount": { "type": "integer", "format": "int32" },
          "threeWeekDiscount": { "type": "integer", "format": "int32" },
          "oneMonthDiscount": { "type": "integer", "format": "int32" },
          "twoMonthDiscount": { "type": "integer", "format": "int32" },
          "threeMonthDiscount": { "type": "integer", "format": "int32" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "Feature": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "DRIVING_AND_SAFETY",
              "CONVENIENCE_AND_CONNECTIVITY",
              "COMFORT",
              "TRAVEL_AND_UTILITY",
              "LIFESTYLE",
              "CUSTOM"
            ]
          },
          "key": { "type": "string" },
          "displayName": { "type": "string" },
          "isAvailable": { "type": "boolean" }
        },
        "description": "Vehicle features"
      },
      "GeoCoordinatesDTO": {
        "type": "object",
        "properties": {
          "lat": { "type": "number", "format": "double" },
          "lon": { "type": "number", "format": "double" }
        }
      },
      "LocationDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "locationType": {
            "type": "string",
            "enum": ["BASE_LOCATION", "ADDITIONAL_LOCATION"]
          },
          "name": { "type": "string" },
          "keyHandoverMethod": {
            "type": "string",
            "enum": ["LOCKBOX", "IN_PERSON", "REMOTE_UNLOCK", "OTHER"]
          },
          "deliveryPriceInCents": { "type": "integer", "format": "int64" },
          "handoverInstructions": { "type": "string" },
          "address": { "$ref": "#/components/schemas/AddressDTO" }
        },
        "description": "Vehicle locations"
      },
      "Mileage": {
        "type": "object",
        "properties": {
          "highwayInMiles": { "type": "integer", "format": "int32" },
          "cityInMiles": { "type": "integer", "format": "int32" }
        },
        "description": "Vehicle mileage information"
      },
      "OnboardingData": {
        "type": "object",
        "properties": {
          "steps": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LOCATION",
                "VIN",
                "LICENSE_PLATE",
                "IMAGES",
                "FEATURES",
                "SPECIFICATIONS",
                "PRICING",
                "DISCOUNT",
                "DESCRIPTION_AND_GUIDELINES",
                "ADD_ONS",
                "FAQS"
              ]
            }
          },
          "isAllStepsCompleted": { "type": "boolean" }
        }
      },
      "Pricing": {
        "type": "object",
        "properties": {
          "dailyPriceInCents": {
            "type": "object",
            "additionalProperties": { "type": "integer", "format": "int32" }
          },
          "basePriceInCents": { "type": "integer", "format": "int32" },
          "boostPricingInPercentage": { "type": "integer", "format": "int32" },
          "extraChargePerMileInCents": { "type": "integer", "format": "int32" }
        }
      },
      "RangeInstant": {
        "type": "object",
        "properties": {
          "from": { "type": "string", "format": "date-time" },
          "to": { "type": "string", "format": "date-time" }
        },
        "description": "Date range that is blocked"
      },
      "RangeInteger": {
        "type": "object",
        "properties": {
          "from": { "type": "integer", "format": "int32" },
          "to": { "type": "integer", "format": "int32" }
        }
      },
      "VehicleBlockedDateDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Blocked date period ID" },
          "dateRange": { "$ref": "#/components/schemas/RangeInstant" },
          "blockReason": {
            "type": "string",
            "description": "Reason for blocking the dates",
            "enum": ["BOOKING", "HOST", "MAINTENANCE", "SNOOZE"]
          },
          "blockReasonData": { "$ref": "#/components/schemas/BlockReasonDTO" },
          "vehicleId": { "type": "string", "description": "ID of the vehicle" }
        },
        "description": "Response containing blocked date information"
      },
      "VehicleDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "businessProfileId": { "type": "string" },
          "onboardingData": { "$ref": "#/components/schemas/OnboardingData" },
          "make": { "type": "string" },
          "model": { "type": "string" },
          "modelYear": { "type": "integer", "format": "int32" },
          "trim": { "type": "string" },
          "vehicleType": {
            "type": "string",
            "enum": [
              "CARS",
              "SUVS",
              "MINIVANS",
              "TRUCKS",
              "VANS",
              "CARGO_VANS",
              "BOX_TRUCKS"
            ]
          },
          "numberOfSeats": { "type": "integer", "format": "int32" },
          "doors": { "type": "integer", "format": "int32" },
          "transmissionType": {
            "type": "string",
            "enum": ["AUTOMATIC", "MANUAL"]
          },
          "fuelType": {
            "type": "string",
            "enum": [
              "ELECTRIC",
              "HYBRID",
              "DIESEL",
              "GASOLINE",
              "PLUG_IN_HYBRID"
            ]
          },
          "driveType": {
            "type": "string",
            "enum": [
              "FWD",
              "RWD",
              "AWD",
              "FOUR_WD",
              "UNKNOWN",
              "SIX_BY_FOUR",
              "FOUR_BY_TWO",
              "GLIDER"
            ]
          },
          "towingCapacityLbs": { "type": "number", "format": "double" },
          "bootSpaceLiters": { "type": "number", "format": "double" },
          "mileage": { "$ref": "#/components/schemas/Mileage" },
          "odometerReadingInMiles": { "type": "integer", "format": "int64" },
          "images": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/File" }
          },
          "vin": { "type": "string" },
          "licensePlateNumber": { "type": "string" },
          "licensePlateState": { "type": "string" },
          "guideLines": { "type": "array", "items": { "type": "string" } },
          "description": { "type": "string" },
          "predefinedFeatures": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Feature" }
          },
          "customFeatures": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Feature" }
          },
          "pricing": { "$ref": "#/components/schemas/Pricing" },
          "metaData": { "$ref": "#/components/schemas/VehicleMetaData" },
          "vehicleStatus": {
            "type": "string",
            "enum": ["DRAFT", "PUBLISHED", "READY_FOR_PUBLISH", "INACTIVE"]
          },
          "auditTimeDTO": { "$ref": "#/components/schemas/AuditTimeDTO" },
          "occupancyPercentage": { "type": "integer", "format": "int32" },
          "earningForecastInCents": { "type": "integer", "format": "int32" },
          "earningForecastWithSuggestedPriceInCents": {
            "type": "integer",
            "format": "int32"
          },
          "blockedDates": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/VehicleBlockedDateDTO" }
          },
          "discountConfiguration": {
            "$ref": "#/components/schemas/DiscountConfiguration"
          },
          "locations": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LocationDTO" }
          },
          "dailyLimitInMiles": { "type": "integer", "format": "int32" },
          "vehicleName": { "type": "string" }
        }
      },
      "VehicleMetaData": {
        "type": "object",
        "properties": {
          "suggestedPrice": { "type": "integer", "format": "int32" },
          "marketPriceRange": { "$ref": "#/components/schemas/RangeInteger" },
          "averageMarketPrice": { "type": "integer", "format": "int32" },
          "hostRank": { "type": "integer", "format": "int32" },
          "comparatorVehicles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ComparatorVehicle" }
          }
        }
      },
      "VehicleSpecificationUpdateDTO": {
        "type": "object",
        "properties": {
          "numberOfSeats": {
            "type": "integer",
            "description": "Number of seats in the vehicle",
            "format": "int32"
          },
          "doors": {
            "type": "integer",
            "description": "Number of doors in the vehicle",
            "format": "int32"
          },
          "transmission": {
            "type": "string",
            "description": "Transmission type",
            "enum": ["AUTOMATIC", "MANUAL"]
          },
          "fuelType": {
            "type": "string",
            "description": "Fuel type",
            "enum": [
              "ELECTRIC",
              "HYBRID",
              "DIESEL",
              "GASOLINE",
              "PLUG_IN_HYBRID"
            ]
          },
          "drivetrain": {
            "type": "string",
            "description": "Drivetrain type",
            "enum": [
              "FWD",
              "RWD",
              "AWD",
              "FOUR_WD",
              "UNKNOWN",
              "SIX_BY_FOUR",
              "FOUR_BY_TWO",
              "GLIDER"
            ]
          },
          "towingCapacityLbs": {
            "type": "number",
            "description": "Towing capacity in pounds",
            "format": "double"
          },
          "bootSpaceLiters": {
            "type": "number",
            "description": "Boot space in liters",
            "format": "double"
          }
        },
        "description": "Vehicle specifications update request"
      },
      "UpdateRegistrationDetailsRequest": {
        "required": ["licensePlateNumber", "licensePlateState"],
        "type": "object",
        "properties": {
          "licensePlateNumber": {
            "type": "string",
            "description": "License plate number"
          },
          "licensePlateState": {
            "type": "string",
            "description": "License plate state"
          }
        },
        "description": "Vehicle registration details update request"
      },
      "UpdateMileageRequest": {
        "type": "object",
        "properties": {
          "dailyLimitInMiles": {
            "type": "integer",
            "description": "Daily limit in miles",
            "format": "int32"
          },
          "extraChargePerMileInCents": {
            "type": "integer",
            "description": "Extra charge per mile in cents",
            "format": "int32"
          }
        },
        "description": "Vehicle daily limit update request"
      },
      "UpdatePricingRequest": {
        "required": ["basePriceInCents", "dailyPriceInCents"],
        "type": "object",
        "properties": {
          "dailyPriceInCents": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "Daily pricing by day of week (1=Monday, 7=Sunday)",
              "format": "int32"
            },
            "description": "Daily pricing by day of week (1=Monday, 7=Sunday)"
          },
          "basePriceInCents": {
            "type": "integer",
            "description": "Base price in cents",
            "format": "int32"
          },
          "boostPricingInPercentage": {
            "type": "integer",
            "description": "Boost pricing percentage",
            "format": "int32"
          },
          "updateMileageRequest": {
            "$ref": "#/components/schemas/UpdateMileageRequest"
          }
        },
        "description": "Vehicle pricing update request"
      },
      "UpdateVehicleOnboardingStatusRequest": {
        "type": "object",
        "properties": {
          "step": {
            "type": "string",
            "description": "Step to update",
            "enum": [
              "LOCATION",
              "VIN",
              "LICENSE_PLATE",
              "IMAGES",
              "FEATURES",
              "SPECIFICATIONS",
              "PRICING",
              "DISCOUNT",
              "DESCRIPTION_AND_GUIDELINES",
              "ADD_ONS",
              "FAQS"
            ]
          }
        },
        "description": "Vehicle onboarding status update request"
      },
      "AddressRequest": {
        "type": "object",
        "properties": {
          "country": { "type": "string" },
          "state": { "type": "string" },
          "zip": { "type": "string" },
          "city": { "type": "string" },
          "street": { "type": "string" },
          "address": { "type": "string" },
          "coordinates": { "$ref": "#/components/schemas/GeoCoordinatesDTO" }
        }
      },
      "LocationRequest": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "locationType": {
            "type": "string",
            "enum": ["BASE_LOCATION", "ADDITIONAL_LOCATION"]
          },
          "name": { "type": "string" },
          "keyHandoverMethod": {
            "type": "string",
            "enum": ["LOCKBOX", "IN_PERSON", "REMOTE_UNLOCK", "OTHER"]
          },
          "deliveryPriceInCents": { "type": "integer", "format": "int64" },
          "handoverInstructions": { "type": "string" },
          "address": { "$ref": "#/components/schemas/AddressRequest" },
          "placeId": { "type": "string" }
        },
        "description": "List of locations"
      },
      "UpdateVehicleLocationsRequest": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "description": "List of locations",
            "items": { "$ref": "#/components/schemas/LocationRequest" }
          }
        },
        "description": "Vehicle locations update request"
      },
      "UpdateVehicleImagesRequest": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "description": "List of vehicle images",
            "items": { "$ref": "#/components/schemas/File" }
          }
        },
        "description": "Vehicle images update request"
      },
      "UpdateFeatureRequest": {
        "type": "object",
        "properties": {
          "predefinedFeatures": {
            "type": "array",
            "description": "List of predefined features",
            "items": { "$ref": "#/components/schemas/Feature" }
          },
          "customFeatures": {
            "type": "array",
            "description": "List of custom features",
            "items": { "$ref": "#/components/schemas/Feature" }
          }
        },
        "description": "Vehicle features update request"
      },
      "QuestionAnswer": {
        "type": "object",
        "properties": {
          "question": { "type": "string" },
          "answer": { "type": "string" }
        }
      },
      "QuestionAnswerResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "question": { "type": "string" },
          "answer": { "type": "string" }
        },
        "description": "FAQs of Vehicle"
      },
      "UpdateDiscountConfigurationRequest": {
        "type": "object",
        "properties": {
          "threeDaysDiscount": {
            "type": "integer",
            "description": "Discount percentage for 3 days rental",
            "format": "int32"
          },
          "oneWeekDiscount": {
            "type": "integer",
            "description": "Discount percentage for 1 week rental",
            "format": "int32"
          },
          "twoWeekDiscount": {
            "type": "integer",
            "description": "Discount percentage for 2 weeks rental",
            "format": "int32"
          },
          "threeWeekDiscount": {
            "type": "integer",
            "description": "Discount percentage for 3 weeks rental",
            "format": "int32"
          },
          "oneMonthDiscount": {
            "type": "integer",
            "description": "Discount percentage for 1 month rental",
            "format": "int32"
          },
          "twoMonthDiscount": {
            "type": "integer",
            "description": "Discount percentage for 2 months rental",
            "format": "int32"
          },
          "threeMonthDiscount": {
            "type": "integer",
            "description": "Discount percentage for 3 months rental",
            "format": "int32"
          }
        },
        "description": "Vehicle discount update request"
      },
      "UpdateDescriptionAndGuideLinesRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Vehicle description"
          },
          "guideLines": {
            "type": "array",
            "description": "Vehicle guide lines",
            "items": { "type": "string", "description": "Vehicle guide lines" }
          }
        },
        "description": "Vehicle description and guide lines update request"
      },
      "ActiveInactiveRequest": {
        "type": "object",
        "properties": {
          "addOnId": { "type": "string", "description": "Add-on ID" },
          "isActive": { "type": "boolean", "description": "Active status" }
        },
        "description": "Add-on ID"
      },
      "VehicleAddOnListDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "vehicleId": { "type": "string" },
          "key": { "type": "string" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "quantity": { "type": "integer", "format": "int32" },
          "price": { "type": "integer", "format": "int64" },
          "pricingType": { "type": "string", "enum": ["PER_DAY", "PER_TRIP"] },
          "isAvailable": { "type": "boolean" }
        }
      },
      "UserRoleMappingRequest": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "role": {
            "type": "string",
            "enum": [
              "HOST",
              "CO_HOST",
              "INVESTOR",
              "PARTNER",
              "GUEST",
              "EXTERNAL_SERVICE"
            ]
          },
          "isActive": { "type": "boolean" },
          "revokedPermissions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATE_VEHICLE",
                "EDIT_VEHICLE",
                "DELETE_VEHICLE",
                "VIEW_VEHICLE",
                "CREATE_TRIP",
                "EDIT_TRIP",
                "DELETE_TRIP",
                "GUEST",
                "STRIPE_WEBHOOK",
                "HOST",
                "INVESTOR",
                "PARTNER"
              ]
            }
          }
        }
      },
      "BlockReasonData": {
        "type": "object",
        "description": "Additional data specific to the block reason"
      },
      "BlockVehicleDatesRequest": {
        "type": "object",
        "properties": {
          "dateRange": { "$ref": "#/components/schemas/RangeInstant" },
          "blockReason": {
            "type": "string",
            "description": "Reason for blocking dates",
            "enum": ["BOOKING", "HOST", "MAINTENANCE", "SNOOZE"]
          },
          "blockReasonData": { "$ref": "#/components/schemas/BlockReasonData" },
          "userId": {
            "type": "string",
            "description": "User ID of the person blocking the dates"
          }
        },
        "description": "Request to block vehicle dates"
      },
      "MarkMaintenanceAsCompletedRequest": {
        "type": "object",
        "properties": {
          "maintenanceId": { "type": "string" },
          "odometerAtServiceInMiles": { "type": "integer", "format": "int64" },
          "completedAt": { "type": "string", "format": "date-time" },
          "serviceLocation": { "type": "string" },
          "costInCents": { "type": "integer", "format": "int32" },
          "receipt": { "$ref": "#/components/schemas/File" },
          "notes": { "type": "string" },
          "description": { "type": "string" }
        }
      },
      "VerifyIdentityRequest": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "description": "User ID" },
          "returnUrl": {
            "type": "string",
            "description": "URL to return after verification"
          }
        },
        "description": "Identity verification request"
      },
      "HostVerifyIdentityResponse": {
        "type": "object",
        "properties": { "clientSecret": { "type": "string" } }
      },
      "RenterVerifyIdentityResponse": {
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "Client secret for verification process"
          }
        },
        "description": "Response containing client secret for identity verification"
      },
      "MessageData": { "type": "object" },
      "SendMessageRequest": {
        "type": "object",
        "properties": {
          "messageType": {
            "type": "string",
            "enum": [
              "TEXT_AND_FILE",
              "SMART_ACTION_REQUEST_DOCUMENT_DRIVERLICENSE",
              "SMART_ACTION_REQUEST_DOCUMENT_INSURANCE",
              "SMART_ACTION_REQUEST_PHOTOS_CHECKIN",
              "SMART_ACTION_REQUEST_PHOTOS_CHECKOUT"
            ]
          },
          "message": { "$ref": "#/components/schemas/MessageData" }
        },
        "description": "Request containing message"
      },
      "ChatDataDTO": {
        "type": "object",
        "properties": {
          "messageId": { "type": "string" },
          "source": { "type": "string", "enum": ["HOST", "CO_HOST", "RENTER"] },
          "messageType": {
            "type": "string",
            "enum": [
              "TEXT_AND_FILE",
              "SMART_ACTION_REQUEST_DOCUMENT_DRIVERLICENSE",
              "SMART_ACTION_REQUEST_DOCUMENT_INSURANCE",
              "SMART_ACTION_REQUEST_PHOTOS_CHECKIN",
              "SMART_ACTION_REQUEST_PHOTOS_CHECKOUT"
            ]
          },
          "message": { "$ref": "#/components/schemas/MessageData" },
          "createdAt": { "type": "string", "format": "date-time" },
          "userDetails": { "$ref": "#/components/schemas/UserDTO" },
          "reactions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ReactionDTO" }
          }
        }
      },
      "ReactionDTO": {
        "type": "object",
        "properties": {
          "userDetails": { "$ref": "#/components/schemas/UserDTO" },
          "role": { "type": "string", "enum": ["HOST", "CO_HOST", "RENTER"] },
          "reactedAt": { "type": "string", "format": "date-time" },
          "reaction": { "type": "string" }
        }
      },
      "SenderDetails": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "isOnline": { "type": "boolean" },
          "lastSeen": { "type": "string", "format": "date-time" }
        }
      },
      "UnreadMessagesResponse": {
        "type": "object",
        "properties": {
          "unreadMessages": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ChatDataDTO" }
          },
          "senderDetails": { "$ref": "#/components/schemas/SenderDetails" }
        }
      },
      "UserDTO": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "name": { "type": "string" },
          "mobileNumber": { "type": "string" },
          "email": { "type": "string" }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [
              "BOOKING_CHAT_RENTER_MESSAGE",
              "BOOKING_CHAT_HOST_MESSAGE",
              "BOOKING_CONFIRMED",
              "BOOKING_DOCUMENT_REJECTED",
              "BOOKING_DOCUMENT_MISSING",
              "BOOKING_DOCUMENT_APPROVED",
              "BOOKING_DOCUMENT_ACTION_REQUIRED",
              "BOOKING_CHECK_IN_REQUIRED",
              "BOOKING_CHECK_IN_DONE",
              "BOOKING_CHECK_OUT_DONE"
            ]
          },
          "title": { "type": "string" },
          "message": { "type": "string" },
          "senderId": { "type": "string" },
          "receiverId": { "type": "string" },
          "relativeId": { "type": "string" },
          "read": { "type": "boolean" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "CreateMaintenanceRequest": {
        "type": "object",
        "properties": {
          "maintenanceType": {
            "type": "string",
            "enum": [
              "GENERAL_MAINTENANCE_EVERY_5000",
              "GENERAL_MAINTENANCE_EVERY_7_RENTAL_DAYS",
              "GENERAL_MAINTENANCE_EVERY_MONTH",
              "ADHOC_MAINTENANCE"
            ]
          },
          "vehicleId": { "type": "string" },
          "dateOfMaintenance": { "type": "string", "format": "date-time" },
          "odometerAtMaintenance": { "type": "integer", "format": "int64" },
          "rentedDaysSinceMaintenance": {
            "type": "integer",
            "format": "int32"
          },
          "totalMaintenances": { "type": "integer", "format": "int32" }
        }
      },
      "CreateMaintenanceResponse": {
        "type": "object",
        "properties": {
          "vehicle": { "$ref": "#/components/schemas/VehicleDetails" },
          "maintenanceId": { "type": "string" },
          "maintenanceType": {
            "type": "string",
            "enum": [
              "GENERAL_MAINTENANCE_EVERY_5000",
              "GENERAL_MAINTENANCE_EVERY_7_RENTAL_DAYS",
              "GENERAL_MAINTENANCE_EVERY_MONTH",
              "ADHOC_MAINTENANCE"
            ]
          },
          "status": {
            "type": "string",
            "enum": ["PENDING", "IN_PROGRESS", "COMPLETED", "CANCELLED"]
          },
          "dateOfMaintenance": { "type": "string", "format": "date-time" },
          "odometerAtMaintenance": { "type": "integer", "format": "int64" },
          "rentedDaysSinceMaintenance": {
            "type": "integer",
            "format": "int32"
          },
          "totalMaintenances": { "type": "integer", "format": "int32" },
          "createdBy": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedBy": { "type": "string" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "FileUploadDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "contentType": { "type": "string" },
          "size": { "type": "integer", "format": "int64" },
          "originalFileName": { "type": "string" },
          "fileType": { "type": "string" },
          "relativePath": { "type": "string" },
          "fileExtension": { "type": "string" },
          "isActive": { "type": "boolean" },
          "createdBy": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "CreateCheckoutRequest": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string",
            "description": "ID of the vehicle to rent"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the rental period",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the rental period",
            "format": "date-time"
          },
          "pickupLocationId": {
            "type": "string",
            "description": "ID of the pickup location"
          },
          "dropoffLocationId": {
            "type": "string",
            "description": "ID of the dropoff location"
          }
        },
        "description": "Checkout session creation request"
      },
      "AppliedAddOns": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "price": { "type": "integer", "format": "int64" },
          "quantity": { "type": "integer", "format": "int32" },
          "pricingType": { "type": "string", "enum": ["PER_DAY", "PER_TRIP"] }
        }
      },
      "BookingActionDetailsDTO": {
        "type": "object",
        "properties": {
          "action": { "type": "string" },
          "actionAt": { "type": "string", "format": "date-time" }
        },
        "description": "Booking activity logs"
      },
      "BookingDetailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the booking",
            "example": "book_123456"
          },
          "vehicle": { "$ref": "#/components/schemas/VehicleListDTO" },
          "renter": { "$ref": "#/components/schemas/RenterDetailsDTO" },
          "renterTotalTrips": {
            "type": "integer",
            "description": "Total number of trips the renter has taken",
            "format": "int64",
            "example": 10
          },
          "businessProfileId": {
            "type": "string",
            "description": "ID of the business profile",
            "example": "bus_123456"
          },
          "durationInfo": { "$ref": "#/components/schemas/DurationInfo" },
          "status": {
            "type": "string",
            "description": "Current status of the booking",
            "example": "CONFIRMED",
            "enum": [
              "PENDING",
              "CONFIRMED",
              "ACTIVE",
              "CANCELLED",
              "COMPLETED",
              "REJECTED",
              "PENDING",
              "CONFIRMED",
              "CANCELLED",
              "COMPLETED",
              "REJECTED"
            ]
          },
          "cancellationReason": {
            "type": "string",
            "description": "Reason for cancellation if the booking was cancelled",
            "example": "Change of plans"
          },
          "perDayRange": {
            "type": "number",
            "description": "Price per day for the booking",
            "format": "double",
            "example": 100.0
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time",
            "example": "2024-03-15T10:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time",
            "example": "2024-03-15T10:00:00Z"
          },
          "createdBy": {
            "type": "string",
            "description": "ID of the user who created the booking",
            "example": "user_123456"
          },
          "updatedBy": {
            "type": "string",
            "description": "ID of the user who last updated the booking",
            "example": "user_123456"
          },
          "locationDetails": {
            "type": "array",
            "description": "Locations",
            "items": { "$ref": "#/components/schemas/LocationDTO" }
          },
          "priceBreakup": {
            "$ref": "#/components/schemas/PreBookingPriceBreakupDTO"
          },
          "bookingDocumentStatus": {
            "type": "string",
            "description": "Document status",
            "enum": ["NOT_UPLOADED", "PENDING", "APPROVED", "REJECTED"]
          },
          "checkInOutDocument": {
            "$ref": "#/components/schemas/CheckInOutDetailDTO"
          },
          "bookingDocument": {
            "$ref": "#/components/schemas/BookingDocumentDTO"
          },
          "bookingActivityLogs": {
            "type": "array",
            "description": "Booking activity logs",
            "items": { "$ref": "#/components/schemas/BookingActionDetailsDTO" }
          },
          "bookingNotes": {
            "type": "array",
            "description": "Notes for the booking",
            "items": { "$ref": "#/components/schemas/BookingNotes" }
          },
          "chatId": { "type": "string", "description": "Chat ID" }
        },
        "description": "Detailed response for a booking",
        "example": {
          "id": "book_123456",
          "vehicleId": "veh_123456",
          "renterDetails": {
            "id": "user_123456",
            "insuranceDetails": {
              "insuranceProvider": "ABC Insurance",
              "policyNumber": "POL123456",
              "insuranceFile": {
                "id": "file_123456",
                "url": "https://example.com/insurance.pdf"
              },
              "insuranceCard": {
                "id": "file_123457",
                "url": "https://example.com/card.jpg"
              },
              "status": "VERIFIED",
              "uploadedAt": "2024-03-15T10:00:00Z",
              "notes": "Insurance verified on 2024-03-15"
            },
            "name": "John Doe",
            "email": "john@example.com",
            "phone": "+1234567890"
          },
          "businessProfileId": "bus_123456",
          "startDate": "2024-03-20T10:00:00Z",
          "endDate": "2024-03-25T10:00:00Z",
          "status": "CONFIRMED",
          "cancellationReason": null,
          "isInsuranceVerified": true,
          "perDayRange": 100.0,
          "createdAt": "2024-03-15T10:00:00Z",
          "updatedAt": "2024-03-15T10:00:00Z",
          "createdBy": "user_123456",
          "updatedBy": "user_123456",
          "checkoutId": "check_123456"
        }
      },
      "BookingDocumentDTO": {
        "type": "object",
        "properties": {
          "insuranceDetails": {
            "$ref": "#/components/schemas/InsuranceDetailsDTO"
          },
          "drivingLicenseDetails": {
            "$ref": "#/components/schemas/DrivingLicenseDetailsDTO"
          }
        },
        "description": "Booking documents"
      },
      "BookingNotes": {
        "type": "object",
        "properties": {
          "note": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "createdBy": { "type": "string" }
        },
        "description": "Notes for the booking"
      },
      "BusinessProfileDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the business"
          },
          "businessName": {
            "type": "string",
            "description": "Name of the business"
          },
          "businessEmail": {
            "type": "string",
            "description": "Email address of the business"
          },
          "businessType": {
            "type": "string",
            "description": "Type of business"
          },
          "businessUrl": {
            "type": "string",
            "description": "Website URL of the business"
          },
          "isVerified": {
            "type": "boolean",
            "description": "Verification status of the business"
          }
        },
        "description": "Business Profile Data Transfer Object"
      },
      "CheckInCheckOutImage": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Image tag",
            "enum": ["INTERIOR_IMAGE", "EXTERIOR_IMAGE", "OTHER_IMAGE"]
          },
          "file": { "$ref": "#/components/schemas/File" }
        },
        "description": "vehicle images"
      },
      "CheckInOutDataDTO": {
        "type": "object",
        "properties": {
          "hostData": { "$ref": "#/components/schemas/VehicleDataDTO" },
          "renterData": { "$ref": "#/components/schemas/VehicleDataDTO" }
        },
        "description": "Check-in data DTO"
      },
      "CheckInOutDetailDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Document ID" },
          "bookingId": { "type": "string", "description": "Booking ID" },
          "checkInData": { "$ref": "#/components/schemas/CheckInOutDataDTO" },
          "checkOutData": { "$ref": "#/components/schemas/CheckInOutDataDTO" }
        },
        "description": "Check-out document DTO"
      },
      "CheckoutDTO": {
        "type": "object",
        "properties": {
          "checkoutSessionId": {
            "type": "string",
            "description": "Stripe checkout session ID"
          },
          "checkoutId": {
            "type": "string",
            "description": "Internal checkout ID"
          },
          "priceBreakup": {
            "$ref": "#/components/schemas/PreBookingPriceBreakupDTO"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the rental period",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the rental period",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Current status of the checkout session"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time"
          },
          "clientSecret": {
            "type": "string",
            "description": "Stripe client secret for payment processing"
          },
          "vehicleDetails": { "$ref": "#/components/schemas/VehicleDetails" },
          "businessProfile": {
            "$ref": "#/components/schemas/BusinessProfileDTO"
          },
          "renter": { "$ref": "#/components/schemas/RenterDTO" },
          "pickupLocation": { "$ref": "#/components/schemas/LocationDTO" },
          "dropoffLocation": { "$ref": "#/components/schemas/LocationDTO" },
          "booking": { "$ref": "#/components/schemas/BookingDetailResponse" }
        }
      },
      "DrivingLicenseDetailsDTO": {
        "type": "object",
        "properties": {
          "file": { "$ref": "#/components/schemas/File" },
          "updatedAt": {
            "type": "string",
            "description": "Updated at",
            "format": "date-time"
          },
          "message": { "type": "string", "description": "Message" },
          "status": {
            "type": "string",
            "description": "Status",
            "enum": ["NOT_UPLOADED", "PENDING", "APPROVED", "REJECTED"]
          }
        },
        "description": "Driving license details DTO"
      },
      "DurationInfo": {
        "type": "object",
        "properties": {
          "startDate": { "type": "string", "format": "date-time" },
          "endDate": { "type": "string", "format": "date-time" },
          "days": { "type": "integer", "format": "int32" }
        },
        "description": "Duration of the trip"
      },
      "InsuranceDetailsDTO": {
        "type": "object",
        "properties": {
          "insuranceDocument": { "$ref": "#/components/schemas/File" },
          "insuranceCard": { "$ref": "#/components/schemas/File" },
          "insuranceProvider": {
            "type": "string",
            "description": "Insurance provider"
          },
          "policyNumber": { "type": "string", "description": "Policy number" },
          "updatedAt": {
            "type": "string",
            "description": "Updated at",
            "format": "date-time"
          },
          "message": { "type": "string", "description": "Message" },
          "status": {
            "type": "string",
            "description": "Status",
            "enum": ["NOT_UPLOADED", "PENDING", "APPROVED", "REJECTED"]
          }
        },
        "description": "Insurance details DTO"
      },
      "PreBookingPriceBreakupDTO": {
        "type": "object",
        "properties": {
          "totalPriceInCents": { "type": "integer", "format": "int64" },
          "platformFeeInCents": { "type": "integer", "format": "int64" },
          "salesFeeInCents": { "type": "integer", "format": "int64" },
          "minimumProtectionFeeInCents": {
            "type": "integer",
            "format": "int64"
          },
          "taxableAmountInCents": { "type": "integer", "format": "int64" },
          "totalDays": { "type": "integer", "format": "int32" },
          "addOns": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AppliedAddOns" }
          },
          "totalDeliveryPriceInCents": { "type": "integer", "format": "int64" },
          "totalRentalPriceInCents": { "type": "integer", "format": "int64" },
          "totalRentalPriceBeforeDiscount": {
            "type": "integer",
            "format": "int64"
          },
          "appliedDiscountPercentage": { "type": "integer", "format": "int32" }
        },
        "description": "Price breakdown of the booking"
      },
      "RenterDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Renter ID" },
          "name": { "type": "string", "description": "Renter name" },
          "email": { "type": "string", "description": "Renter email" },
          "mobileNumber": {
            "type": "string",
            "description": "Renter mobile number"
          }
        },
        "description": "Basic renter information"
      },
      "RenterDetailsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the renter",
            "example": "user_123456"
          },
          "name": {
            "type": "string",
            "description": "Full name of the renter",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address of the renter",
            "example": "john@example.com"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the renter",
            "example": "+1234567890"
          },
          "joinedAt": {
            "type": "string",
            "description": "Timestamp when the renter joined the platform",
            "format": "date-time",
            "example": "2024-03-15T10:00:00Z"
          }
        },
        "description": "Details of the renter",
        "example": {
          "id": "user_123456",
          "driverLicense": {
            "id": "file_123456",
            "url": "https://example.com/driver-license.jpg"
          },
          "insuranceDetails": {
            "insuranceProvider": "ABC Insurance",
            "policyNumber": "POL123456",
            "insuranceFile": {
              "id": "file_123456",
              "url": "https://example.com/insurance.pdf"
            },
            "insuranceCard": {
              "id": "file_123457",
              "url": "https://example.com/card.jpg"
            },
            "status": "VERIFIED",
            "uploadedAt": "2024-03-15T10:00:00Z",
            "notes": "Insurance verified on 2024-03-15"
          },
          "name": "John Doe",
          "email": "john@example.com",
          "phone": "+1234567890"
        }
      },
      "VehicleDataDTO": {
        "type": "object",
        "properties": {
          "vehicleImages": {
            "type": "array",
            "description": "vehicle images",
            "items": { "$ref": "#/components/schemas/CheckInCheckOutImage" }
          },
          "odometerReadingInMiles": {
            "type": "integer",
            "description": "Odometer reading",
            "format": "int64"
          },
          "fuelTankLevel": {
            "type": "number",
            "description": "Fuel tank level",
            "format": "double"
          }
        },
        "description": "Vehicle images DTO"
      },
      "VehicleListDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "make": { "type": "string" },
          "model": { "type": "string" },
          "modelYear": { "type": "integer", "format": "int32" },
          "images": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/File" }
          },
          "licensePlateNumber": { "type": "string" },
          "vehicleStatus": {
            "type": "string",
            "enum": ["DRAFT", "PUBLISHED", "READY_FOR_PUBLISH", "INACTIVE"]
          },
          "locations": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LocationDTO" }
          }
        },
        "description": "Details of the vehicle"
      },
      "FAQsRequest": {
        "type": "object",
        "properties": {
          "questionsAnswers": { "$ref": "#/components/schemas/QuestionAnswer" }
        }
      },
      "FAQsListResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "vehicleId": { "type": "string" },
          "businessProfileId": { "type": "string" },
          "questionsAnswers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/QuestionAnswerResponse" }
          }
        }
      },
      "VehicleAddOnDetailDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "vehicleId": { "type": "string" },
          "key": { "type": "string" },
          "name": { "type": "string" },
          "quantity": { "type": "integer", "format": "int32" },
          "description": { "type": "string" },
          "price": { "type": "integer", "format": "int64" },
          "pricingType": { "type": "string", "enum": ["PER_DAY", "PER_TRIP"] },
          "isAvailable": { "type": "boolean" },
          "isActive": { "type": "boolean" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "VehicleAddOnRequest": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "quantity": { "type": "integer", "format": "int32" },
          "price": { "type": "integer", "format": "int64" },
          "pricingType": { "type": "string", "enum": ["PER_DAY", "PER_TRIP"] },
          "isAvailable": { "type": "boolean" }
        }
      },
      "CreateVehicleRequestDTO": {
        "type": "object",
        "properties": { "vin": { "type": "string" } }
      },
      "Address": {
        "type": "object",
        "properties": {
          "country": { "type": "string" },
          "state": { "type": "string" },
          "zip": { "type": "string" },
          "city": { "type": "string" },
          "street": { "type": "string" },
          "address": { "type": "string" },
          "coordinates": { "$ref": "#/components/schemas/GeoJsonPoint" }
        }
      },
      "GeoJsonPoint": {
        "type": "object",
        "properties": {
          "x": { "type": "number", "format": "double" },
          "y": { "type": "number", "format": "double" },
          "type": { "type": "string" },
          "coordinates": {
            "type": "array",
            "items": { "type": "number", "format": "double" }
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "businessProfileId": { "type": "string" },
          "locationType": {
            "type": "string",
            "enum": ["BASE_LOCATION", "ADDITIONAL_LOCATION"]
          },
          "name": { "type": "string" },
          "keyHandoverMethod": {
            "type": "string",
            "enum": ["LOCKBOX", "IN_PERSON", "REMOTE_UNLOCK", "OTHER"]
          },
          "deliveryPriceInCents": { "type": "integer", "format": "int64" },
          "handoverInstructions": { "type": "string" },
          "address": { "$ref": "#/components/schemas/Address" },
          "placeId": { "type": "string" }
        }
      },
      "BusinessProfileResponse": {
        "type": "object",
        "properties": {
          "onboardingUrl": {
            "type": "string",
            "description": "URL for business onboarding process"
          }
        },
        "description": "Response containing the business onboarding URL"
      },
      "BusinessProfileRequest": {
        "type": "object",
        "properties": {
          "refreshUrl": {
            "type": "string",
            "description": "URL to refresh the onboarding process"
          },
          "returnUrl": {
            "type": "string",
            "description": "URL to return after onboarding completion"
          }
        },
        "description": "Business profile request containing refresh and return URLs"
      },
      "BouncieWebhookResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Webhook ID" },
          "name": { "type": "string", "description": "Webhook Name" },
          "url": { "type": "string", "description": "Webhook URL" },
          "authKey": { "type": "string", "description": "Webhook Auth Key" },
          "applicationId": {
            "type": "string",
            "description": "Webhook Application ID"
          },
          "events": {
            "type": "array",
            "description": "Webhook Events",
            "items": { "type": "string", "description": "Webhook Events" }
          },
          "active": { "type": "boolean", "description": "Webhook Active" },
          "createdAt": {
            "type": "string",
            "description": "Webhook Created At"
          },
          "updatedAt": { "type": "string", "description": "Webhook Updated At" }
        },
        "description": "Response containing the Bouncie webhook"
      },
      "AddUserRoleMappingRequest": {
        "type": "object",
        "properties": {
          "mobileNumber": { "type": "string" },
          "role": {
            "type": "string",
            "enum": [
              "HOST",
              "CO_HOST",
              "INVESTOR",
              "PARTNER",
              "GUEST",
              "EXTERNAL_SERVICE"
            ]
          },
          "userId": { "type": "string" }
        }
      },
      "AccessFileRequest": {
        "type": "object",
        "properties": { "path": { "type": "string" } }
      },
      "GenerateTokenRequest": {
        "type": "object",
        "properties": {
          "client": { "type": "string" },
          "roles": { "type": "array", "items": { "type": "string" } }
        }
      },
      "GenerateTokenResponse": {
        "type": "object",
        "properties": { "token": { "type": "string" } }
      },
      "RenterMobileNumberLoginVerifyRequest": {
        "type": "object",
        "properties": {
          "otp": { "type": "string" },
          "otpRequestId": { "type": "string" }
        }
      },
      "OTPVerifyResponseDTO": {
        "type": "object",
        "properties": {
          "authKey": {
            "type": "string",
            "description": "Authentication token"
          },
          "userId": { "type": "string", "description": "User ID" },
          "askForName": {
            "type": "boolean",
            "description": "Flag indicating if name is required"
          }
        },
        "description": "Response containing authentication details"
      },
      "RenterMobileNumberLoginRequest": {
        "type": "object",
        "properties": { "mobileNumber": { "type": "string" } }
      },
      "OTPSentResponseDTO": {
        "type": "object",
        "properties": {
          "otpRequestId": {
            "type": "string",
            "description": "Unique identifier for the OTP request"
          }
        },
        "description": "Response containing OTP request ID"
      },
      "UserMobileNumberLoginVerifyRequest": {
        "type": "object",
        "properties": {
          "otpRequestId": {
            "type": "string",
            "description": "OTP request ID received from send OTP endpoint"
          },
          "otp": {
            "type": "string",
            "description": "OTP code received on mobile"
          }
        },
        "description": "Mobile OTP verification request"
      },
      "UserMobileNumberLoginRequest": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "integer",
            "description": "Country code for the mobile number",
            "format": "int32"
          },
          "mobileNumber": { "type": "string", "description": "Mobile number" },
          "languageCode": {
            "type": "string",
            "description": "Language code for OTP message"
          },
          "ip": { "type": "string", "description": "Client IP address" }
        },
        "description": "Mobile number login request"
      },
      "UserEmailLoginVerifyRequest": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "description": "User ID" },
          "otpRequestId": {
            "type": "string",
            "description": "OTP request ID received from send OTP endpoint"
          },
          "otp": {
            "type": "string",
            "description": "OTP code received on email"
          }
        },
        "description": "Email OTP verification request"
      },
      "UserEmailLoginRequest": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "description": "User ID" },
          "email": { "type": "string", "description": "Email address" },
          "ip": { "type": "string", "description": "Client IP address" }
        },
        "description": "Email login request"
      },
      "FeaturesStepData": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/StepData" },
          {
            "type": "object",
            "properties": {
              "preDefinedFeatures": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "ALL_WHEEL_DRIVE",
                    "BLIND_SPOT_WARNING",
                    "BACKUP_CAMERA",
                    "KEYLESS_ENTRY",
                    "PARKING_SENSORS",
                    "LANE_DEPARTURE_WARNING",
                    "COLLISION_WARNING_SYSTEM",
                    "ADAPTIVE_CRUISE_CONTROL",
                    "ANTI_LOCK_BRAKING_SYSTEM",
                    "USB_CHARGER",
                    "USB_INPUT",
                    "AUX_INPUT",
                    "BLUETOOTH",
                    "ANDROID_AUTO",
                    "APPLE_CARPLAY",
                    "GPS_NAVIGATION",
                    "REMOTE_START",
                    "POWER_LIFTGATE",
                    "HANDS_FREE_TRUNK",
                    "HEATED_SEATS",
                    "VENTILATED_SEATS",
                    "LEATHER_SEATS",
                    "SUNROOF",
                    "CLIMATE_CONTROL",
                    "HEATED_STEERING_WHEEL",
                    "SKI_RACK",
                    "BIKE_RACK",
                    "ROOF_BOX",
                    "TOW_HITCH",
                    "SNOW_TIRES",
                    "TOLL_PASS",
                    "CONVERTIBLE",
                    "PET_FRIENDLY",
                    "CHILD_SEAT",
                    "WHEELCHAIR_ACCESSIBLE",
                    "SMOKING_ALLOWED"
                  ]
                }
              },
              "customFeatures": {
                "type": "array",
                "items": { "type": "string" }
              },
              "preDefinedFeaturesMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Feature"
                }
              },
              "customFeaturesMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Feature"
                }
              }
            }
          }
        ]
      },
      "LicensePlateStepData": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/StepData" },
          {
            "type": "object",
            "properties": {
              "licensePlateNumber": { "type": "string" },
              "licensePlateState": { "type": "string" },
              "description": { "type": "string" }
            }
          }
        ]
      },
      "LocationStepData": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/StepData" },
          {
            "type": "object",
            "properties": {
              "address": { "type": "string" },
              "coordinates": {
                "$ref": "#/components/schemas/GeoCoordinatesDTO"
              },
              "street": { "type": "string" },
              "city": { "type": "string" },
              "state": { "type": "string" },
              "zip": { "type": "string" },
              "country": { "type": "string" }
            }
          }
        ]
      },
      "OnboardingDetailsDTO": {
        "type": "object",
        "properties": {
          "onboardingId": { "type": "string" },
          "steps": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/StepStatus"
            }
          },
          "completed": { "type": "boolean" }
        }
      },
      "SpecificationsStepData": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/StepData" },
          {
            "type": "object",
            "properties": {
              "seats": { "type": "integer", "format": "int32" },
              "doors": { "type": "integer", "format": "int32" },
              "transmission": { "type": "string" },
              "fuelType": { "type": "string" },
              "drivetrain": { "type": "string" },
              "towingCapacityLbs": { "type": "number", "format": "double" },
              "bootSpaceLiters": { "type": "number", "format": "double" }
            }
          }
        ]
      },
      "StepData": {
        "type": "object",
        "properties": {
          "step": {
            "type": "string",
            "enum": [
              "LOCATION",
              "VIN",
              "LICENSE_PLATE",
              "IMAGES",
              "FEATURES",
              "SPECIFICATIONS",
              "PRICING",
              "DISCOUNT",
              "DESCRIPTION_AND_GUIDELINES",
              "ADD_ONS",
              "FAQS"
            ]
          }
        },
        "discriminator": { "propertyName": "step" }
      },
      "StepStatus": {
        "type": "object",
        "properties": {
          "completed": { "type": "boolean" },
          "step": {
            "type": "string",
            "enum": [
              "LOCATION",
              "VIN",
              "LICENSE_PLATE",
              "IMAGES",
              "FEATURES",
              "SPECIFICATIONS",
              "PRICING",
              "DISCOUNT",
              "DESCRIPTION_AND_GUIDELINES",
              "ADD_ONS",
              "FAQS"
            ]
          },
          "data": { "$ref": "#/components/schemas/StepData" }
        }
      },
      "VehicleImageStepData": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/StepData" },
          {
            "type": "object",
            "properties": {
              "images": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/File" }
              }
            }
          }
        ]
      },
      "VinStepData": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/StepData" },
          {
            "type": "object",
            "properties": {
              "vin": { "type": "string" },
              "make": { "type": "string" },
              "model": { "type": "string" },
              "modelYear": { "type": "string" },
              "bodyType": { "type": "string" },
              "fuelType": { "type": "string" },
              "fuelTypeSecondary": { "type": "string" },
              "trim": { "type": "string" },
              "transmissionStyle": { "type": "string" },
              "errorText": { "type": "string" },
              "ncsabodyType": { "type": "string" },
              "brakeAssist": { "type": "string" },
              "blindSpotWarning": { "type": "string" },
              "backupCamera": { "type": "string" },
              "driveType": { "type": "string" },
              "seats": { "type": "string" },
              "doors": { "type": "string" },
              "defaultFeatures": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "ALL_WHEEL_DRIVE",
                    "BLIND_SPOT_WARNING",
                    "BACKUP_CAMERA",
                    "KEYLESS_ENTRY",
                    "PARKING_SENSORS",
                    "LANE_DEPARTURE_WARNING",
                    "COLLISION_WARNING_SYSTEM",
                    "ADAPTIVE_CRUISE_CONTROL",
                    "ANTI_LOCK_BRAKING_SYSTEM",
                    "USB_CHARGER",
                    "USB_INPUT",
                    "AUX_INPUT",
                    "BLUETOOTH",
                    "ANDROID_AUTO",
                    "APPLE_CARPLAY",
                    "GPS_NAVIGATION",
                    "REMOTE_START",
                    "POWER_LIFTGATE",
                    "HANDS_FREE_TRUNK",
                    "HEATED_SEATS",
                    "VENTILATED_SEATS",
                    "LEATHER_SEATS",
                    "SUNROOF",
                    "CLIMATE_CONTROL",
                    "HEATED_STEERING_WHEEL",
                    "SKI_RACK",
                    "BIKE_RACK",
                    "ROOF_BOX",
                    "TOW_HITCH",
                    "SNOW_TIRES",
                    "TOLL_PASS",
                    "CONVERTIBLE",
                    "PET_FRIENDLY",
                    "CHILD_SEAT",
                    "WHEELCHAIR_ACCESSIBLE",
                    "SMOKING_ALLOWED"
                  ]
                }
              }
            }
          }
        ]
      },
      "MessageActionRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": ["RESCHEDULE", "SKIP", "SEND_NOW"]
          },
          "sendTime": { "type": "string", "format": "date-time" },
          "skipAll": { "type": "boolean" }
        }
      },
      "RenterDetailsResponse": {
        "type": "object",
        "properties": {
          "renterId": { "type": "string", "description": "Renter ID" },
          "name": { "type": "string", "description": "Renter name" },
          "email": { "type": "string", "description": "Renter email" },
          "age": {
            "type": "integer",
            "description": "Renter age",
            "format": "int32"
          }
        },
        "description": "Response containing basic renter details"
      },
      "Insurance": {
        "type": "object",
        "properties": {
          "insuranceProvider": { "type": "string" },
          "policyNumber": { "type": "string" },
          "insuranceCard": { "$ref": "#/components/schemas/File" },
          "insuranceFile": { "$ref": "#/components/schemas/File" },
          "notes": { "type": "string" },
          "status": {
            "type": "string",
            "enum": ["UPLOADED", "VERIFIED", "REJECTED"]
          },
          "uploadedAt": { "type": "string", "format": "date-time" }
        },
        "description": "Insurance document"
      },
      "RenterDetailsRequestDTO": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Renter name" },
          "email": { "type": "string", "description": "Renter email" },
          "age": {
            "type": "integer",
            "description": "Renter age",
            "format": "int32"
          },
          "driverLicense": { "$ref": "#/components/schemas/File" },
          "insuranceProof": { "$ref": "#/components/schemas/Insurance" }
        },
        "description": "Renter details update request"
      },
      "UpdateDocumentRequest": {
        "type": "object",
        "properties": {
          "insuranceDetails": {
            "$ref": "#/components/schemas/UpdateInsuranceDetailsRequest"
          },
          "drivingLicenseDetails": {
            "$ref": "#/components/schemas/UpdateDrivingLicenseDetailsRequest"
          }
        },
        "description": "Document update request"
      },
      "UpdateDrivingLicenseDetailsRequest": {
        "type": "object",
        "properties": {
          "drivingLicense": { "$ref": "#/components/schemas/File" }
        }
      },
      "UpdateInsuranceDetailsRequest": {
        "type": "object",
        "properties": {
          "insuranceDocument": { "$ref": "#/components/schemas/File" },
          "insuranceCard": { "$ref": "#/components/schemas/File" },
          "insuranceProvider": { "type": "string" },
          "policyNumber": { "type": "string" }
        }
      },
      "UpdateCheckInOutDetailRequest": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["CHECK_IN", "CHECK_OUT"] },
          "vehicleImages": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CheckInCheckOutImage" }
          },
          "odometerReadingInMiles": { "type": "integer", "format": "int64" },
          "fuelTankLevel": { "type": "number", "format": "double" }
        },
        "description": "Request containing check-in-out detail details"
      },
      "ReactionRequest": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "description": "ID of the message",
            "example": "msg_123456"
          },
          "emoji": {
            "type": "string",
            "description": "Emoji to react with",
            "example": "👍"
          }
        },
        "description": "Request containing reaction"
      },
      "AddItemRequest": {
        "type": "object",
        "properties": {
          "addOn": { "$ref": "#/components/schemas/UpdateAppliedAddOnRequest" }
        },
        "description": "Addon to add"
      },
      "UpdateAppliedAddOnRequest": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of the addon" },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the addon",
            "format": "int32"
          },
          "actionType": { "type": "string", "enum": ["ADD", "REMOVE"] }
        },
        "description": "Addon to add"
      },
      "UpdateVehicleRequestDTO": {
        "type": "object",
        "properties": {
          "trim": { "type": "string", "description": "Vehicle trim level" },
          "vehicleType": {
            "type": "string",
            "description": "Type of vehicle",
            "enum": [
              "CARS",
              "SUVS",
              "MINIVANS",
              "TRUCKS",
              "VANS",
              "CARGO_VANS",
              "BOX_TRUCKS"
            ]
          },
          "numberOfSeats": {
            "type": "integer",
            "description": "Number of seats in the vehicle",
            "format": "int32"
          },
          "transmissionType": {
            "type": "string",
            "description": "Type of transmission",
            "enum": ["AUTOMATIC", "MANUAL"]
          },
          "fuelType": {
            "type": "string",
            "description": "Type of fuel used",
            "enum": [
              "ELECTRIC",
              "HYBRID",
              "DIESEL",
              "GASOLINE",
              "PLUG_IN_HYBRID"
            ]
          },
          "mileage": { "$ref": "#/components/schemas/Mileage" },
          "pricing": { "$ref": "#/components/schemas/Pricing" },
          "status": {
            "type": "string",
            "description": "Current status of the vehicle",
            "enum": ["DRAFT", "PUBLISHED", "READY_FOR_PUBLISH", "INACTIVE"]
          },
          "images": {
            "type": "array",
            "description": "List of vehicle images",
            "items": { "$ref": "#/components/schemas/File" }
          },
          "addressDetails": { "$ref": "#/components/schemas/AddressDTO" }
        },
        "description": "Vehicle update request containing fields to update"
      },
      "UpdateBookingRequest": {
        "required": ["note"],
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "description": "Note for the booking",
            "example": "Note for the booking"
          }
        },
        "description": "Request containing note",
        "example": { "note": "Notes for the booking" }
      },
      "VerifyDocumentsRequest": {
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the documents verification",
            "example": "VERIFIED",
            "enum": [
              "NOT_UPLOADED",
              "PENDING",
              "APPROVED",
              "REJECTED",
              "VERIFIED",
              "REJECTED"
            ]
          },
          "rejectionReason": {
            "type": "string",
            "description": "Reason for rejecting the documents",
            "example": "Documents not verified"
          },
          "document": {
            "type": "string",
            "description": "Document to be verified",
            "example": "DRIVER_LICENSE, INSURANCE_CARD",
            "enum": ["DRIVER_LICENSE", "INSURANCE_CARD"]
          }
        },
        "description": "Request containing insurance verification status",
        "example": { "isVerified": true }
      },
      "MaintenanceStatsDTO": {
        "type": "object",
        "properties": {
          "currentOdometerReadingInMiles": {
            "type": "integer",
            "format": "int64"
          },
          "daysSinceLastOilChange": { "type": "integer", "format": "int64" },
          "totalSpendCurrentYear": { "type": "integer", "format": "int32" },
          "numberOfOverdueTasks": { "type": "integer", "format": "int32" },
          "numberOfRecurringTasks": { "type": "integer", "format": "int32" },
          "recurringTaskDetails": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/RecurringTaskDetails" }
          },
          "totalSpendLast30Days": { "type": "integer", "format": "int32" },
          "mostExpensiveTask": { "$ref": "#/components/schemas/TaskCost" },
          "taskCostHistory": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TaskCost" }
          }
        }
      },
      "RecurringTaskDetails": {
        "type": "object",
        "properties": {
          "taskType": {
            "type": "string",
            "enum": [
              "ESSENTIAL_TASK_OIL_CHANGE",
              "ESSENTIAL_TASK_TIRE_ROTATION",
              "ESSENTIAL_TASK_BRAKE_INSPECTION",
              "ESSENTIAL_TASK_BRAKE_PAD_REPLACEMENT",
              "ESSENTIAL_TASK_BATTERY_REPLACEMENT",
              "ESSENTIAL_TASK_AIR_FILTER_REPLACEMENT",
              "ESSENTIAL_TASK_CABIN_AIR_FILTER_REPLACEMENT",
              "ESSENTIAL_TASK_SPARK_PLUG_REPLACEMENT",
              "ESSENTIAL_TASK_COOLANT_FLUSH",
              "ESSENTIAL_TASK_TRANSMISSION_FLUID_CHANGE",
              "ESSENTIAL_TASK_POWER_STEERING_FLUID_CHANGE",
              "ESSENTIAL_TASK_BRAKE_FLUID_FLUSH",
              "TIRE_AND_SUSPENSION_TIRE_REPLACEMENT",
              "TIRE_AND_SUSPENSION_WHEEL_ALIGNMENT",
              "TIRE_AND_SUSPENSION_TIRE_BALANCING",
              "TIRE_AND_SUSPENSION_SUSPENSION_CHECK",
              "FLUID_AND_FILTERS_FUEL_FILTER_REPLACEMENT",
              "FLUID_AND_FILTERS_DIFFERENTIAL_FLUID_CHANGE",
              "FLUID_AND_FILTERS_WINDSHIELD_WASHER_FLUID_TOP_UP",
              "GENERAL_SERVICE_ANNUAL_INSPECTION",
              "GENERAL_SERVICE_MULTI_POINT_INSPECTION",
              "GENERAL_SERVICE_SCHEDULED_MAINTENANCE_30K_60K_90K",
              "OTHER_CHECK_ENGINE_LIGHT_DIAGNOSIS",
              "OTHER_VEHICLE_DETAIL_OR_CLEANING",
              "OTHER_SOFTWARE_OR_FIRMWARE_UPDATE"
            ]
          },
          "repeatEveryDays": { "type": "integer", "format": "int64" },
          "repeatEveryMiles": { "type": "integer", "format": "int64" }
        }
      },
      "TaskCost": {
        "type": "object",
        "properties": {
          "taskType": {
            "type": "string",
            "enum": [
              "ESSENTIAL_TASK_OIL_CHANGE",
              "ESSENTIAL_TASK_TIRE_ROTATION",
              "ESSENTIAL_TASK_BRAKE_INSPECTION",
              "ESSENTIAL_TASK_BRAKE_PAD_REPLACEMENT",
              "ESSENTIAL_TASK_BATTERY_REPLACEMENT",
              "ESSENTIAL_TASK_AIR_FILTER_REPLACEMENT",
              "ESSENTIAL_TASK_CABIN_AIR_FILTER_REPLACEMENT",
              "ESSENTIAL_TASK_SPARK_PLUG_REPLACEMENT",
              "ESSENTIAL_TASK_COOLANT_FLUSH",
              "ESSENTIAL_TASK_TRANSMISSION_FLUID_CHANGE",
              "ESSENTIAL_TASK_POWER_STEERING_FLUID_CHANGE",
              "ESSENTIAL_TASK_BRAKE_FLUID_FLUSH",
              "TIRE_AND_SUSPENSION_TIRE_REPLACEMENT",
              "TIRE_AND_SUSPENSION_WHEEL_ALIGNMENT",
              "TIRE_AND_SUSPENSION_TIRE_BALANCING",
              "TIRE_AND_SUSPENSION_SUSPENSION_CHECK",
              "FLUID_AND_FILTERS_FUEL_FILTER_REPLACEMENT",
              "FLUID_AND_FILTERS_DIFFERENTIAL_FLUID_CHANGE",
              "FLUID_AND_FILTERS_WINDSHIELD_WASHER_FLUID_TOP_UP",
              "GENERAL_SERVICE_ANNUAL_INSPECTION",
              "GENERAL_SERVICE_MULTI_POINT_INSPECTION",
              "GENERAL_SERVICE_SCHEDULED_MAINTENANCE_30K_60K_90K",
              "OTHER_CHECK_ENGINE_LIGHT_DIAGNOSIS",
              "OTHER_VEHICLE_DETAIL_OR_CLEANING",
              "OTHER_SOFTWARE_OR_FIRMWARE_UPDATE"
            ]
          },
          "cost": { "type": "integer", "format": "int32" }
        }
      },
      "MaintenanceRecordDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "vehicleId": { "type": "string" },
          "taskType": { "type": "string" },
          "description": { "type": "string" },
          "notes": { "type": "string" },
          "serviceLocation": { "type": "string" },
          "costInCents": { "type": "integer", "format": "int32" },
          "receipt": { "$ref": "#/components/schemas/File" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "VehicleVerifyResponse": { "type": "object" },
      "VehicleOverviewTelematicsDataListDTO": {
        "type": "object",
        "properties": {
          "vehicleId": { "type": "string" },
          "vehicleMake": { "type": "string" },
          "vehicleModel": { "type": "string" },
          "vehicleYear": { "type": "integer", "format": "int32" },
          "lastBookedAt": { "type": "string", "format": "date-time" },
          "batteryStatus": { "type": "string" },
          "fuelLevel": { "type": "integer", "format": "int32" },
          "currentOdometerInMiles": { "type": "integer", "format": "int64" },
          "engineLight": { "type": "boolean" }
        }
      },
      "BouncieVehicleDetails": {
        "type": "object",
        "properties": {
          "batteryStatus": { "type": "string" },
          "fuelLevel": { "type": "integer", "format": "int32" },
          "currentSpeed": { "type": "integer", "format": "int32" },
          "currentOdometerInMiles": { "type": "integer", "format": "int64" },
          "lastKnownLocation": {
            "$ref": "#/components/schemas/VehicleLocation"
          },
          "lastUpdated": { "type": "string", "format": "date-time" }
        }
      },
      "TripDetails": {
        "type": "object",
        "properties": {
          "hardBrakingCount": { "type": "integer", "format": "int32" },
          "hardAccelerationCount": { "type": "integer", "format": "int32" },
          "distance": { "type": "number", "format": "double" },
          "tripDuration": { "type": "integer", "format": "int64" },
          "averageSpeed": { "type": "number", "format": "double" },
          "fuelConsumed": { "type": "integer", "format": "int32" },
          "milePerGallon": { "type": "number", "format": "double" }
        }
      },
      "VehicleLocation": {
        "type": "object",
        "properties": {
          "currentLocation": {
            "$ref": "#/components/schemas/GeoCoordinatesDTO"
          },
          "address": { "type": "string" }
        }
      },
      "VehicleOverviewTelematicsData": {
        "type": "object",
        "properties": {
          "vehicleId": { "type": "string" },
          "vehicleMake": { "type": "string" },
          "vehicleModel": { "type": "string" },
          "vehicleYear": { "type": "integer", "format": "int32" },
          "tripDetails": { "$ref": "#/components/schemas/TripDetails" },
          "lastBookedAt": { "type": "string", "format": "date-time" },
          "vehicleHealthScore": { "type": "integer", "format": "int32" },
          "bouncieVehicleDetails": {
            "$ref": "#/components/schemas/BouncieVehicleDetails"
          }
        }
      },
      "MultiValueMapStringString": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "writeOnly": true
          },
          "empty": { "type": "boolean" }
        },
        "additionalProperties": {
          "type": "array",
          "items": { "type": "string" }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": { "minimum": 0, "type": "integer", "format": "int32" },
          "size": { "minimum": 1, "type": "integer", "format": "int32" },
          "sort": { "type": "array", "items": { "type": "string" } }
        }
      },
      "PageScheduleMessageListDTO": {
        "type": "object",
        "properties": {
          "totalElements": { "type": "integer", "format": "int64" },
          "totalPages": { "type": "integer", "format": "int32" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ScheduleMessageListDTO" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "empty": { "type": "boolean" }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": { "type": "integer", "format": "int64" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "paged": { "type": "boolean" },
          "pageNumber": { "type": "integer", "format": "int32" },
          "pageSize": { "type": "integer", "format": "int32" },
          "unpaged": { "type": "boolean" }
        }
      },
      "RenterDetails": {
        "type": "object",
        "properties": {
          "renterId": { "type": "string" },
          "name": { "type": "string" },
          "email": { "type": "string" },
          "phone": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "ScheduleMessageListDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "sendTime": { "type": "string", "format": "date-time" },
          "bookingId": { "type": "string" },
          "renterDetails": { "$ref": "#/components/schemas/RenterDetails" },
          "vehicleDetails": { "$ref": "#/components/schemas/VehicleDetails" },
          "message": { "type": "string" },
          "templateDetails": { "$ref": "#/components/schemas/TempalteDetails" },
          "status": {
            "type": "string",
            "enum": ["SCHEDULED", "SENT", "FAILED", "RESCHEDULED", "SKIPPED"]
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": { "type": "boolean" },
          "sorted": { "type": "boolean" },
          "unsorted": { "type": "boolean" }
        }
      },
      "TempalteDetails": {
        "type": "object",
        "properties": {
          "templateId": { "type": "string" },
          "templateContent": { "type": "string" }
        }
      },
      "ScheduleMessageDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "sendTime": { "type": "string", "format": "date-time" },
          "bookingId": { "type": "string" },
          "renterDetails": { "$ref": "#/components/schemas/RenterDetails" },
          "vehicleDetails": { "$ref": "#/components/schemas/VehicleDetails" },
          "templateDetails": { "$ref": "#/components/schemas/TempalteDetails" },
          "message": { "type": "string" },
          "attachments": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/File" }
          },
          "status": {
            "type": "string",
            "enum": ["SCHEDULED", "SENT", "FAILED", "RESCHEDULED", "SKIPPED"]
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "ScheduleMessageStats": {
        "type": "object",
        "properties": {
          "totalScheduled": { "type": "integer", "format": "int64" },
          "totalSent": { "type": "integer", "format": "int64" },
          "totalFailed": { "type": "integer", "format": "int64" },
          "totalToday": { "type": "integer", "format": "int64" }
        }
      },
      "RenterProfileResponse": {
        "type": "object",
        "properties": {
          "renterId": { "type": "string", "description": "Renter ID" },
          "name": { "type": "string", "description": "Renter name" },
          "email": { "type": "string", "description": "Renter email" },
          "mobileNumber": {
            "type": "string",
            "description": "Renter mobile number"
          },
          "age": {
            "type": "integer",
            "description": "Renter age",
            "format": "int32"
          },
          "driverLicense": { "$ref": "#/components/schemas/File" },
          "insuranceDocument": { "$ref": "#/components/schemas/Insurance" },
          "businessProfileId": {
            "type": "string",
            "description": "Business profile ID"
          },
          "identityVerificationStatus": {
            "type": "string",
            "description": "Identity verification status",
            "enum": ["NOT_STARTED", "IN_PROGRESS", "VERIFIED", "FAILED"]
          },
          "identityVerifiedAt": {
            "type": "string",
            "description": "Timestamp when identity was verified",
            "format": "date-time"
          },
          "identityVerificationFailedReason": {
            "type": "string",
            "description": "Reason for identity verification failure"
          }
        },
        "description": "Complete renter profile information"
      },
      "BookingDocumentStatus": {
        "type": "object",
        "properties": {
          "insuranceStatus": {
            "type": "string",
            "enum": ["NOT_UPLOADED", "PENDING", "APPROVED", "REJECTED"]
          },
          "drivingLicenseStatus": {
            "type": "string",
            "enum": ["NOT_UPLOADED", "PENDING", "APPROVED", "REJECTED"]
          }
        },
        "description": "Document status"
      },
      "RenterBookingListDTO": {
        "type": "object",
        "properties": {
          "bookingId": { "type": "string", "description": "Booking ID" },
          "vehicleId": { "type": "string", "description": "Vehicle ID" },
          "make": { "type": "string", "description": "Vehicle make" },
          "model": { "type": "string", "description": "Vehicle model" },
          "plateNumber": {
            "type": "string",
            "description": "Vehicle plate number"
          },
          "vehicleImage": { "$ref": "#/components/schemas/File" },
          "durationInfo": { "$ref": "#/components/schemas/DurationInfo" },
          "status": { "type": "string", "description": "Booking status" },
          "documentStatus": {
            "$ref": "#/components/schemas/BookingDocumentStatus"
          },
          "locationDetails": {
            "type": "array",
            "description": "Locations",
            "items": { "$ref": "#/components/schemas/LocationDTO" }
          }
        },
        "description": "Basic booking information for list view"
      },
      "PriceBreakup": { "type": "object", "description": "Price breakdown" },
      "RenterBookingDetailDTO": {
        "type": "object",
        "properties": {
          "bookingId": { "type": "string", "description": "Booking ID" },
          "vehicleId": { "type": "string", "description": "Vehicle ID" },
          "make": { "type": "string", "description": "Vehicle make" },
          "model": { "type": "string", "description": "Vehicle model" },
          "plateNumber": {
            "type": "string",
            "description": "Vehicle plate number"
          },
          "vehicleImage": { "$ref": "#/components/schemas/File" },
          "durationInfo": { "$ref": "#/components/schemas/DurationInfo" },
          "status": { "type": "string", "description": "Booking status" },
          "priceBreakup": { "$ref": "#/components/schemas/PriceBreakup" },
          "businessProfileId": {
            "type": "string",
            "description": "Business profile ID"
          },
          "locationDetails": {
            "type": "array",
            "description": "Locations",
            "items": { "$ref": "#/components/schemas/LocationDTO" }
          },
          "checkInOutDetail": {
            "$ref": "#/components/schemas/CheckInOutDetailDTO"
          }
        },
        "description": "Detailed booking information"
      },
      "ChatDTO": {
        "type": "object",
        "properties": {
          "senderDetails": { "$ref": "#/components/schemas/SenderDetails" },
          "readedMessages": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ChatDataDTO" }
          },
          "unreadMessages": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ChatDataDTO" }
          }
        },
        "description": "Chat information"
      },
      "MessageTemplateListDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "messageBody": { "type": "string" },
          "vehicles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/VehicleDetails" }
          },
          "category": {
            "type": "string",
            "enum": [
              "CUSTOM",
              "TRIP_START",
              "TRIP_END",
              "CHECK_IN",
              "CHECK_OUT",
              "REMINDER",
              "INVOICE"
            ]
          },
          "useCase": {
            "type": "string",
            "enum": [
              "STANDARD",
              "TRIP_REMOE_UNLOCK",
              "AIRTPORT_DELIVERY",
              "CUSTOM_DELIVERY",
              "KEY_HANDOFF_INSTRUCTIONS",
              "EARLY_RETURN",
              "TRIP_END",
              "OTHER"
            ]
          },
          "timingConfig": {
            "$ref": "#/components/schemas/MessageTimingConfig"
          },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "createdBy": { "type": "string" },
          "updatedBy": { "type": "string" }
        }
      },
      "MaintenanceDetails": {
        "type": "object",
        "properties": {
          "maintenanceId": { "type": "string" },
          "maintenanceType": {
            "type": "string",
            "enum": [
              "GENERAL_MAINTENANCE_EVERY_5000",
              "GENERAL_MAINTENANCE_EVERY_7_RENTAL_DAYS",
              "GENERAL_MAINTENANCE_EVERY_MONTH",
              "ADHOC_MAINTENANCE"
            ]
          },
          "dateOfMaintenance": { "type": "string", "format": "date-time" },
          "odometerAtMaintenance": { "type": "integer", "format": "int64" },
          "status": {
            "type": "string",
            "enum": ["PENDING", "IN_PROGRESS", "COMPLETED", "CANCELLED"]
          },
          "vehicleOutInformation": {
            "$ref": "#/components/schemas/VehicleOutInformation"
          },
          "totalMaintenanceCostInCents": {
            "type": "integer",
            "format": "int64"
          },
          "totalMaintenances": { "type": "integer", "format": "int32" },
          "repairTasks": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ESSENTIAL_TASK_OIL_CHANGE",
                "ESSENTIAL_TASK_TIRE_ROTATION",
                "ESSENTIAL_TASK_BRAKE_INSPECTION",
                "ESSENTIAL_TASK_BRAKE_PAD_REPLACEMENT",
                "ESSENTIAL_TASK_BATTERY_REPLACEMENT",
                "ESSENTIAL_TASK_AIR_FILTER_REPLACEMENT",
                "ESSENTIAL_TASK_CABIN_AIR_FILTER_REPLACEMENT",
                "ESSENTIAL_TASK_SPARK_PLUG_REPLACEMENT",
                "ESSENTIAL_TASK_COOLANT_FLUSH",
                "ESSENTIAL_TASK_TRANSMISSION_FLUID_CHANGE",
                "ESSENTIAL_TASK_POWER_STEERING_FLUID_CHANGE",
                "ESSENTIAL_TASK_BRAKE_FLUID_FLUSH",
                "TIRE_AND_SUSPENSION_TIRE_REPLACEMENT",
                "TIRE_AND_SUSPENSION_WHEEL_ALIGNMENT",
                "TIRE_AND_SUSPENSION_TIRE_BALANCING",
                "TIRE_AND_SUSPENSION_SUSPENSION_CHECK",
                "FLUID_AND_FILTERS_FUEL_FILTER_REPLACEMENT",
                "FLUID_AND_FILTERS_DIFFERENTIAL_FLUID_CHANGE",
                "FLUID_AND_FILTERS_WINDSHIELD_WASHER_FLUID_TOP_UP",
                "GENERAL_SERVICE_ANNUAL_INSPECTION",
                "GENERAL_SERVICE_MULTI_POINT_INSPECTION",
                "GENERAL_SERVICE_SCHEDULED_MAINTENANCE_30K_60K_90K",
                "OTHER_CHECK_ENGINE_LIGHT_DIAGNOSIS",
                "OTHER_VEHICLE_DETAIL_OR_CLEANING",
                "OTHER_SOFTWARE_OR_FIRMWARE_UPDATE"
              ]
            }
          },
          "customRepairTasks": {
            "type": "array",
            "items": { "type": "string" }
          },
          "numberOfAttachments": { "type": "integer", "format": "int32" }
        }
      },
      "MaintenanceListDTO": {
        "type": "object",
        "properties": {
          "vehicle": { "$ref": "#/components/schemas/VehicleDetails" },
          "maintenanceDetails": {
            "$ref": "#/components/schemas/MaintenanceDetails"
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "PageMaintenanceListDTO": {
        "type": "object",
        "properties": {
          "totalElements": { "type": "integer", "format": "int64" },
          "totalPages": { "type": "integer", "format": "int32" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MaintenanceListDTO" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "empty": { "type": "boolean" }
        }
      },
      "CreateMaintenancePrerequisitesResponse": {
        "type": "object",
        "properties": {
          "totalMaintenances": { "type": "integer", "format": "int32" },
          "odometerAtMaintenance": { "type": "integer", "format": "int64" },
          "rentedDaysSinceMaintenance": { "type": "integer", "format": "int32" }
        }
      },
      "MaintenanceDetailDTO": {
        "type": "object",
        "properties": {
          "vehicle": { "$ref": "#/components/schemas/VehicleDetails" },
          "maintenanceType": {
            "type": "string",
            "enum": [
              "GENERAL_MAINTENANCE_EVERY_5000",
              "GENERAL_MAINTENANCE_EVERY_7_RENTAL_DAYS",
              "GENERAL_MAINTENANCE_EVERY_MONTH",
              "ADHOC_MAINTENANCE"
            ]
          },
          "status": {
            "type": "string",
            "enum": ["PENDING", "IN_PROGRESS", "COMPLETED", "CANCELLED"]
          },
          "dateOfMaintenance": { "type": "string", "format": "date-time" },
          "businessProfileId": { "type": "string" },
          "odometerAtMaintenance": { "type": "integer", "format": "int64" },
          "rentedDaysSinceMaintenance": {
            "type": "integer",
            "format": "int32"
          },
          "totalMaintenances": { "type": "integer", "format": "int32" },
          "repairOrder": { "$ref": "#/components/schemas/RepairRecord" },
          "createdBy": { "type": "string" },
          "updatedBy": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "active": { "type": "boolean" }
        }
      },
      "RepairRecord": {
        "type": "object",
        "properties": {
          "totalPartsPaymentInCents": { "type": "integer", "format": "int64" },
          "totalLaborPaymentInCents": { "type": "integer", "format": "int64" },
          "images": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/File" }
          },
          "notes": { "type": "string" },
          "createdBy": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedBy": { "type": "string" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "vehicleOutInformation": {
            "$ref": "#/components/schemas/VehicleOutInformation"
          },
          "repairTasks": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ESSENTIAL_TASK_OIL_CHANGE",
                "ESSENTIAL_TASK_TIRE_ROTATION",
                "ESSENTIAL_TASK_BRAKE_INSPECTION",
                "ESSENTIAL_TASK_BRAKE_PAD_REPLACEMENT",
                "ESSENTIAL_TASK_BATTERY_REPLACEMENT",
                "ESSENTIAL_TASK_AIR_FILTER_REPLACEMENT",
                "ESSENTIAL_TASK_CABIN_AIR_FILTER_REPLACEMENT",
                "ESSENTIAL_TASK_SPARK_PLUG_REPLACEMENT",
                "ESSENTIAL_TASK_COOLANT_FLUSH",
                "ESSENTIAL_TASK_TRANSMISSION_FLUID_CHANGE",
                "ESSENTIAL_TASK_POWER_STEERING_FLUID_CHANGE",
                "ESSENTIAL_TASK_BRAKE_FLUID_FLUSH",
                "TIRE_AND_SUSPENSION_TIRE_REPLACEMENT",
                "TIRE_AND_SUSPENSION_WHEEL_ALIGNMENT",
                "TIRE_AND_SUSPENSION_TIRE_BALANCING",
                "TIRE_AND_SUSPENSION_SUSPENSION_CHECK",
                "FLUID_AND_FILTERS_FUEL_FILTER_REPLACEMENT",
                "FLUID_AND_FILTERS_DIFFERENTIAL_FLUID_CHANGE",
                "FLUID_AND_FILTERS_WINDSHIELD_WASHER_FLUID_TOP_UP",
                "GENERAL_SERVICE_ANNUAL_INSPECTION",
                "GENERAL_SERVICE_MULTI_POINT_INSPECTION",
                "GENERAL_SERVICE_SCHEDULED_MAINTENANCE_30K_60K_90K",
                "OTHER_CHECK_ENGINE_LIGHT_DIAGNOSIS",
                "OTHER_VEHICLE_DETAIL_OR_CLEANING",
                "OTHER_SOFTWARE_OR_FIRMWARE_UPDATE"
              ]
            }
          },
          "customRepairTasks": {
            "type": "array",
            "items": { "type": "string" }
          },
          "workshopDetails": { "$ref": "#/components/schemas/WorkshopDetails" }
        }
      },
      "FilterDTOObject": {
        "type": "object",
        "properties": {
          "data": { "type": "object" },
          "type": {
            "type": "string",
            "enum": [
              "SLIDER",
              "CHECKBOX",
              "DROPDOWN",
              "TOGGLE",
              "TEXT_BOX",
              "DATE_RANGE",
              "RANGE",
              "CUSTOM"
            ]
          },
          "title": { "type": "string" },
          "keyName": { "type": "string" },
          "keySuffix": { "type": "string" }
        }
      },
      "VehicleAddOn": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "vehicleId": { "type": "string" },
          "key": { "type": "string" },
          "name": { "type": "string" },
          "quantity": { "type": "integer", "format": "int32" },
          "description": { "type": "string" },
          "price": { "type": "integer", "format": "int64" },
          "pricingType": { "type": "string", "enum": ["PER_DAY", "PER_TRIP"] },
          "isAvailable": { "type": "string", "enum": ["ACTIVE", "INACTIVE"] },
          "isActive": { "type": "boolean" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "VehilceCalendarViewDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Vehicle ID" },
          "make": { "type": "string", "description": "Vehicle make" },
          "model": { "type": "string", "description": "Vehicle model" },
          "modelYear": {
            "type": "integer",
            "description": "Vehicle model year",
            "format": "int32"
          },
          "image": { "$ref": "#/components/schemas/File" },
          "vehicleStatus": {
            "type": "string",
            "description": "Current status of the vehicle",
            "enum": ["DRAFT", "PUBLISHED", "READY_FOR_PUBLISH", "INACTIVE"]
          },
          "blockedDates": {
            "type": "array",
            "description": "List of blocked dates for the vehicle",
            "items": { "$ref": "#/components/schemas/VehicleBlockedDateDTO" }
          }
        },
        "description": "Vehicle calendar view data"
      },
      "BouncieAuthUrlResponse": {
        "type": "object",
        "properties": {
          "authorizationUrl": {
            "type": "string",
            "description": "URL for Bouncie OAuth authorization"
          }
        },
        "description": "Response containing the Bouncie authorization URL"
      },
      "BookingListingDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the booking",
            "example": "book_123456"
          },
          "vehicle": { "$ref": "#/components/schemas/VehicleListDTO" },
          "renter": { "$ref": "#/components/schemas/RenterDetailsDTO" },
          "businessProfileId": {
            "type": "string",
            "description": "ID of the business profile",
            "example": "bus_123456"
          },
          "durationInfo": { "$ref": "#/components/schemas/DurationInfo" },
          "status": {
            "type": "string",
            "description": "Current status of the booking",
            "example": "CONFIRMED",
            "enum": [
              "PENDING",
              "CONFIRMED",
              "ACTIVE",
              "CANCELLED",
              "COMPLETED",
              "REJECTED",
              "PENDING",
              "CONFIRMED",
              "CANCELLED",
              "COMPLETED",
              "REJECTED"
            ]
          },
          "cancellationReason": {
            "type": "string",
            "description": "Reason for cancellation if the booking was cancelled",
            "example": "Change of plans"
          },
          "perDayRange": {
            "type": "number",
            "description": "Price per day for the booking",
            "format": "double",
            "example": 100.0
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time",
            "example": "2024-03-15T10:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time",
            "example": "2024-03-15T10:00:00Z"
          },
          "createdBy": {
            "type": "string",
            "description": "ID of the user who created the booking",
            "example": "user_123456"
          },
          "updatedBy": {
            "type": "string",
            "description": "ID of the user who last updated the booking",
            "example": "user_123456"
          },
          "locationDetails": {
            "type": "array",
            "description": "Locations",
            "items": { "$ref": "#/components/schemas/LocationDTO" }
          },
          "priceBreakup": {
            "$ref": "#/components/schemas/PreBookingPriceBreakupDTO"
          },
          "documentStatus": {
            "type": "string",
            "description": "Document status",
            "enum": ["NOT_UPLOADED", "PENDING", "APPROVED", "REJECTED"]
          },
          "actionButtonStatus": {
            "type": "string",
            "description": "Action button status",
            "enum": [
              "MANAGE_TRIP",
              "REVIEW_DOCUMENTS",
              "REQUEST_DOCUMENTS",
              "VIEW_TRIP"
            ]
          }
        },
        "description": "DTO for listing bookings",
        "example": {
          "id": "book_123456",
          "vehicleId": "veh_123456",
          "renterId": "user_123456",
          "businessProfileId": "bus_123456",
          "startDate": "2024-03-20T10:00:00Z",
          "endDate": "2024-03-25T10:00:00Z",
          "status": "CONFIRMED",
          "cancellationReason": null,
          "perDayRange": 100.0,
          "createdAt": "2024-03-15T10:00:00Z",
          "updatedAt": "2024-03-15T10:00:00Z",
          "createdBy": "user_123456",
          "updatedBy": "user_123456",
          "checkoutId": "check_123456"
        }
      },
      "PageBookingListingDTO": {
        "type": "object",
        "properties": {
          "totalElements": { "type": "integer", "format": "int64" },
          "totalPages": { "type": "integer", "format": "int32" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BookingListingDTO" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "empty": { "type": "boolean" }
        }
      },
      "ChatListingDTO": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "string",
            "description": "ID of the booking",
            "example": "book_123456"
          },
          "renterDetails": { "$ref": "#/components/schemas/RenterDetailsDTO" },
          "vehicleDetails": { "$ref": "#/components/schemas/VehicleListDTO" },
          "tripDuration": { "$ref": "#/components/schemas/DurationInfo" },
          "bookingStatus": {
            "type": "string",
            "description": "Current status of the booking",
            "example": "CONFIRMED",
            "enum": [
              "PENDING",
              "CONFIRMED",
              "ACTIVE",
              "CANCELLED",
              "COMPLETED",
              "REJECTED",
              "PENDING",
              "CONFIRMED",
              "CANCELLED",
              "COMPLETED",
              "REJECTED"
            ]
          },
          "lastMessage": { "$ref": "#/components/schemas/LastMessageDTO" },
          "chatDTO": { "$ref": "#/components/schemas/ChatDTO" },
          "numberOfUnreadMessages": {
            "type": "integer",
            "description": "Number of unread messages",
            "format": "int32",
            "example": 2
          }
        },
        "description": "DTO for listing chats with booking information",
        "example": {
          "bookingId": "book_123456",
          "renterDetails": {
            "id": "user_123456",
            "name": "John Doe",
            "email": "john@example.com",
            "phone": "+1234567890",
            "joinedAt": "2024-03-15T10:00:00Z"
          },
          "vehicleDetails": {
            "id": "veh_123456",
            "make": "Toyota",
            "model": "Camry",
            "modelYear": 2022,
            "vehicleName": "Toyota Camry 2022"
          },
          "tripDuration": {
            "startDate": "2024-03-20T10:00:00Z",
            "endDate": "2024-03-25T10:00:00Z",
            "days": 5
          },
          "bookingStatus": "CONFIRMED",
          "lastMessage": {
            "text": "Hello, when will you arrive?",
            "source": "HOST",
            "createdAt": "2024-03-15T10:00:00Z"
          },
          "chatDTO": {
            "userOnline": {
              "isOnline": true,
              "lastSeen": "2024-03-15T10:00:00Z"
            },
            "readedMessages": [],
            "unreadMessages": []
          },
          "numberOfUnreadMessages": 2
        }
      },
      "LastMessageDTO": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text content of the message",
            "example": "Hello, when will you arrive?"
          },
          "source": {
            "type": "string",
            "description": "Source of the message",
            "example": "HOST",
            "enum": ["HOST", "CO_HOST", "RENTER", "HOST", "CO_HOST", "RENTER"]
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp when the message was created",
            "format": "date-time",
            "example": "2024-03-15T10:00:00Z"
          }
        },
        "description": "Last message in the chat"
      },
      "PageChatListingDTO": {
        "type": "object",
        "properties": {
          "totalElements": { "type": "integer", "format": "int64" },
          "totalPages": { "type": "integer", "format": "int32" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ChatListingDTO" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "empty": { "type": "boolean" }
        }
      },
      "PageUserRoleMappingListDTO": {
        "type": "object",
        "properties": {
          "totalElements": { "type": "integer", "format": "int64" },
          "totalPages": { "type": "integer", "format": "int32" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserRoleMappingListDTO" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "empty": { "type": "boolean" }
        }
      },
      "UserDetails": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "name": { "type": "string" },
          "email": { "type": "string" },
          "mobileNumber": { "type": "string" },
          "identityVerificationStatus": {
            "type": "string",
            "enum": ["NOT_STARTED", "IN_PROGRESS", "VERIFIED", "FAILED"]
          },
          "identityVerificationFailedReason": { "type": "string" },
          "identityVerifiedAt": { "type": "string", "format": "date-time" }
        }
      },
      "UserRoleMappingListDTO": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/UserDetails" },
          "role": {
            "type": "string",
            "enum": [
              "HOST",
              "CO_HOST",
              "INVESTOR",
              "PARTNER",
              "GUEST",
              "EXTERNAL_SERVICE"
            ]
          },
          "isActive": { "type": "boolean" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "PriceDetails": {
        "type": "object",
        "properties": {
          "totalDays": { "type": "integer", "format": "int32" },
          "totalRentalPriceInCents": { "type": "integer", "format": "int64" },
          "totalRentalPriceBeforeDiscount": {
            "type": "integer",
            "format": "int64"
          },
          "appliedDiscountPercentage": { "type": "integer", "format": "int32" },
          "totalDeliveryPriceInCents": { "type": "integer", "format": "int64" }
        },
        "description": "Pricing details"
      },
      "PublicVehicleListDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Vehicle ID" },
          "make": { "type": "string", "description": "Vehicle make" },
          "model": { "type": "string", "description": "Vehicle model" },
          "modelYear": {
            "type": "integer",
            "description": "Vehicle model year",
            "format": "int32"
          },
          "vehicleType": {
            "type": "string",
            "description": "Type of vehicle",
            "enum": [
              "CARS",
              "SUVS",
              "MINIVANS",
              "TRUCKS",
              "VANS",
              "CARGO_VANS",
              "BOX_TRUCKS"
            ]
          },
          "numberOfSeats": {
            "type": "integer",
            "description": "Number of seats",
            "format": "int32"
          },
          "transmissionType": {
            "type": "string",
            "description": "Type of transmission",
            "enum": ["AUTOMATIC", "MANUAL"]
          },
          "images": {
            "type": "array",
            "description": "Vehicle images",
            "items": { "$ref": "#/components/schemas/File" }
          },
          "fuelType": {
            "type": "string",
            "description": "Type of fuel used",
            "enum": [
              "ELECTRIC",
              "HYBRID",
              "DIESEL",
              "GASOLINE",
              "PLUG_IN_HYBRID"
            ]
          },
          "mileage": { "$ref": "#/components/schemas/Mileage" },
          "priceDetails": { "$ref": "#/components/schemas/PriceDetails" },
          "isAvailable": {
            "type": "boolean",
            "description": "Vehicle availability status"
          }
        },
        "description": "Vehicle list item with basic information"
      },
      "PublicBusinessProfileDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Business profile ID" },
          "name": { "type": "string", "description": "Business name" },
          "businessUrl": { "type": "string", "description": "Business URL" }
        },
        "description": "Business profile information"
      },
      "PublicVehicleDetailsDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Vehicle ID" },
          "make": { "type": "string", "description": "Vehicle make" },
          "model": { "type": "string", "description": "Vehicle model" },
          "modelYear": {
            "type": "integer",
            "description": "Vehicle model year",
            "format": "int32"
          },
          "vehicleType": {
            "type": "string",
            "description": "Type of vehicle",
            "enum": [
              "CARS",
              "SUVS",
              "MINIVANS",
              "TRUCKS",
              "VANS",
              "CARGO_VANS",
              "BOX_TRUCKS"
            ]
          },
          "transmissionType": {
            "type": "string",
            "description": "Type of transmission",
            "enum": ["AUTOMATIC", "MANUAL"]
          },
          "features": {
            "type": "array",
            "description": "Vehicle features",
            "items": { "$ref": "#/components/schemas/Feature" }
          },
          "numberOfSeats": {
            "type": "integer",
            "description": "Number of seats",
            "format": "int32"
          },
          "images": {
            "type": "array",
            "description": "Vehicle images",
            "items": { "$ref": "#/components/schemas/File" }
          },
          "fuelType": {
            "type": "string",
            "description": "Type of fuel used",
            "enum": [
              "ELECTRIC",
              "HYBRID",
              "DIESEL",
              "GASOLINE",
              "PLUG_IN_HYBRID"
            ]
          },
          "mileage": { "$ref": "#/components/schemas/Mileage" },
          "description": {
            "type": "string",
            "description": "Vehicle description"
          },
          "guideLines": {
            "type": "array",
            "description": "Vehicle guide lines",
            "items": { "type": "string", "description": "Vehicle guide lines" }
          },
          "priceDetails": { "$ref": "#/components/schemas/PriceDetails" },
          "businessProfile": {
            "$ref": "#/components/schemas/PublicBusinessProfileDTO"
          },
          "blockedDates": {
            "type": "array",
            "description": "List of blocked dates",
            "items": { "$ref": "#/components/schemas/VehicleBlockedDateDTO" }
          },
          "extraChargePerMileInCents": {
            "type": "integer",
            "description": "Extra charge per mile in cents",
            "format": "int32"
          },
          "dailyLimitInMiles": {
            "type": "integer",
            "description": "Daily limit in miles",
            "format": "int32"
          },
          "questionAnswer": {
            "type": "array",
            "description": "FAQs of Vehicle",
            "items": { "$ref": "#/components/schemas/QuestionAnswerResponse" }
          },
          "locations": {
            "type": "array",
            "description": "Vehicle locations",
            "items": { "$ref": "#/components/schemas/LocationDTO" }
          }
        },
        "description": "Detailed vehicle information"
      },
      "OnboardingResetDTO": {
        "type": "object",
        "properties": { "message": { "type": "string" } }
      }
    }
  }
}
