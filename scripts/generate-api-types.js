#!/usr/bin/env node

/**
 * OpenAPI Type Generation Script
 *
 * This script generates TypeScript types from the OpenAPI specification.
 * It uses openapi-typescript to generate types and organizes them into
 * separate files for better maintainability.
 */

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')

// Configuration
const OPENAPI_SPEC_PATH = path.join(__dirname, '../lib/openapi.json')
const OUTPUT_DIR = path.join(__dirname, '../lib/types/api')
const TEMP_OUTPUT_PATH = path.join(__dirname, '../lib/types/api/generated.ts')

// Check if OpenAPI spec exists
if (!fs.existsSync(OPENAPI_SPEC_PATH)) {
  console.error('‚ùå OpenAPI specification not found at:', OPENAPI_SPEC_PATH)
  console.log(
    'Please ensure the OpenAPI spec is available before running type generation.',
  )
  process.exit(1)
}

// Ensure output directory exists
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true })
}

console.log('üöÄ Starting OpenAPI type generation...')

try {
  // Check if openapi-typescript is installed
  try {
    execSync('npx openapi-typescript --version', { stdio: 'ignore' })
  } catch (error) {
    console.log('üì¶ Installing openapi-typescript...')
    execSync('npm install -D openapi-typescript', { stdio: 'inherit' })
  }

  // Generate types from OpenAPI spec
  console.log('üîÑ Generating TypeScript types from OpenAPI specification...')
  execSync(
    `npx openapi-typescript ${OPENAPI_SPEC_PATH} --output ${TEMP_OUTPUT_PATH}`,
    {
      stdio: 'inherit',
    },
  )

  // Read the generated types
  const generatedTypes = fs.readFileSync(TEMP_OUTPUT_PATH, 'utf8')

  // Split types into separate files based on tags/paths
  console.log('üìÅ Organizing types into separate files...')

  // Create auth types
  const authTypes = extractTypesForDomain(generatedTypes, 'auth')
  if (authTypes) {
    fs.writeFileSync(path.join(OUTPUT_DIR, 'auth.ts'), authTypes)
    console.log('‚úÖ Created auth.ts')
  }

  // Create renter types
  const renterTypes = extractTypesForDomain(generatedTypes, 'renter')
  if (renterTypes) {
    fs.writeFileSync(path.join(OUTPUT_DIR, 'renter.ts'), renterTypes)
    console.log('‚úÖ Created renter.ts')
  }

  // Create booking types
  const bookingTypes = extractTypesForDomain(generatedTypes, 'booking')
  if (bookingTypes) {
    fs.writeFileSync(path.join(OUTPUT_DIR, 'booking.ts'), renterTypes)
    console.log('‚úÖ Created booking.ts')
  }

  // Create checkout types
  const checkoutTypes = extractTypesForDomain(generatedTypes, 'checkout')
  if (checkoutTypes) {
    fs.writeFileSync(path.join(OUTPUT_DIR, 'checkout.ts'), checkoutTypes)
    console.log('‚úÖ Created checkout.ts')
  }

  // Create upload types
  const uploadTypes = extractTypesForDomain(generatedTypes, 'upload')
  if (uploadTypes) {
    fs.writeFileSync(path.join(OUTPUT_DIR, 'upload.ts'), uploadTypes)
    console.log('‚úÖ Created upload.ts')
  }

  // Update the index file to export generated types
  updateIndexFile()

  // Clean up temporary file
  fs.unlinkSync(TEMP_OUTPUT_PATH)

  console.log('‚ú® Type generation completed successfully!')
  console.log('üìù Generated types are available in:', OUTPUT_DIR)
} catch (error) {
  console.error('‚ùå Type generation failed:', error.message)

  // Clean up temporary file if it exists
  if (fs.existsSync(TEMP_OUTPUT_PATH)) {
    fs.unlinkSync(TEMP_OUTPUT_PATH)
  }

  process.exit(1)
}

/**
 * Extract types for a specific domain from generated types
 */
function extractTypesForDomain(generatedTypes, domain) {
  // This is a simplified extraction - in a real implementation,
  // you would parse the generated types and extract relevant interfaces
  // based on the OpenAPI paths and tags

  const header = `/**
 * Generated ${domain} types from OpenAPI specification
 * Do not edit this file manually - it will be overwritten
 */

import { BaseEntity } from './common';

`

  // For now, return a placeholder that can be expanded
  return (
    header +
    `// ${domain.charAt(0).toUpperCase() + domain.slice(1)} types will be generated here\n`
  )
}

/**
 * Update the index file to export generated types
 */
function updateIndexFile() {
  const indexPath = path.join(OUTPUT_DIR, 'index.ts')
  const indexContent = `/**
 * API types index - exports all generated and common types
 */

// Common types
export * from './common';

// Generated types
export * from './auth';
export * from './renter';
export * from './booking';
export * from './checkout';
export * from './upload';
`

  fs.writeFileSync(indexPath, indexContent)
  console.log('‚úÖ Updated index.ts')
}
